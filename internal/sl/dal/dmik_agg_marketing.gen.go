// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/sl/model"
)

func newDmikAggMarketing(db *gorm.DB, opts ...gen.DOOption) dmikAggMarketing {
	_dmikAggMarketing := dmikAggMarketing{}

	_dmikAggMarketing.dmikAggMarketingDo.UseDB(db, opts...)
	_dmikAggMarketing.dmikAggMarketingDo.UseModel(&model.DmikAggMarketing{})

	tableName := _dmikAggMarketing.dmikAggMarketingDo.TableName()
	_dmikAggMarketing.ALL = field.NewAsterisk(tableName)
	_dmikAggMarketing.DateEvent = field.NewTime(tableName, "date_event")
	_dmikAggMarketing.EventName = field.NewString(tableName, "event_name")
	_dmikAggMarketing.OsName = field.NewString(tableName, "os_name")
	_dmikAggMarketing.Product = field.NewString(tableName, "product")
	_dmikAggMarketing.Object = field.NewString(tableName, "object")
	_dmikAggMarketing.Utm = field.NewString(tableName, "utm")
	_dmikAggMarketing.MediaSource = field.NewString(tableName, "media_source")
	_dmikAggMarketing.UtmSource = field.NewString(tableName, "utm_source")
	_dmikAggMarketing.UtmMedium = field.NewString(tableName, "utm_medium")
	_dmikAggMarketing.UtmCampaign = field.NewString(tableName, "utm_campaign")
	_dmikAggMarketing.UtmTerm = field.NewString(tableName, "utm_term")
	_dmikAggMarketing.UtmContent = field.NewString(tableName, "utm_content")
	_dmikAggMarketing.Id6 = field.NewString(tableName, "id_6")
	_dmikAggMarketing.Id64 = field.NewString(tableName, "id_6_4")
	_dmikAggMarketing.Id4 = field.NewString(tableName, "id_4")
	_dmikAggMarketing.IDPerformance = field.NewString(tableName, "id_performance")
	_dmikAggMarketing.IDText = field.NewString(tableName, "id_text")
	_dmikAggMarketing.Rk = field.NewString(tableName, "rk")
	_dmikAggMarketing.TranscriptEvents = field.NewString(tableName, "transcript_events")
	_dmikAggMarketing.Platform = field.NewString(tableName, "platform")
	_dmikAggMarketing.NatureType = field.NewString(tableName, "nature_type")
	_dmikAggMarketing.Team = field.NewString(tableName, "team")
	_dmikAggMarketing.Description = field.NewString(tableName, "description")
	_dmikAggMarketing.DescriptionHTML = field.NewString(tableName, "description_html")
	_dmikAggMarketing.ScreenPath = field.NewString(tableName, "screen_path")
	_dmikAggMarketing.ScreenPathHTML = field.NewString(tableName, "screen_path_html")
	_dmikAggMarketing.PropertiesDesc = field.NewString(tableName, "properties_desc")
	_dmikAggMarketing.PropertiesDescHTML = field.NewString(tableName, "properties_desc_html")
	_dmikAggMarketing.CommentHTML = field.NewString(tableName, "comment_html")
	_dmikAggMarketing.SectionCode = field.NewString(tableName, "section_code")
	_dmikAggMarketing.SectionName = field.NewString(tableName, "section_name")
	_dmikAggMarketing.CategoryCode = field.NewString(tableName, "category_code")
	_dmikAggMarketing.CategoryName = field.NewString(tableName, "category_name")
	_dmikAggMarketing.MinVersion = field.NewString(tableName, "min_version")
	_dmikAggMarketing.MaxVersion = field.NewString(tableName, "max_version")
	_dmikAggMarketing.EventType = field.NewString(tableName, "event_type")
	_dmikAggMarketing.Tags = field.NewString(tableName, "tags")
	_dmikAggMarketing.Module = field.NewString(tableName, "module")
	_dmikAggMarketing.Flow = field.NewString(tableName, "flow")
	_dmikAggMarketing.EventForAnalytic = field.NewString(tableName, "event_for_analytic")
	_dmikAggMarketing.UsersSession = field.NewField(tableName, "users_session")
	_dmikAggMarketing.EventsSession = field.NewField(tableName, "events_session")
	_dmikAggMarketing.Users = field.NewField(tableName, "users")
	_dmikAggMarketing.Events = field.NewField(tableName, "events")

	_dmikAggMarketing.fillFieldMap()

	return _dmikAggMarketing
}

type dmikAggMarketing struct {
	dmikAggMarketingDo

	ALL                field.Asterisk
	DateEvent          field.Time
	EventName          field.String
	OsName             field.String
	Product            field.String
	Object             field.String
	Utm                field.String
	MediaSource        field.String
	UtmSource          field.String
	UtmMedium          field.String
	UtmCampaign        field.String
	UtmTerm            field.String
	UtmContent         field.String
	Id6                field.String
	Id64               field.String
	Id4                field.String
	IDPerformance      field.String
	IDText             field.String
	Rk                 field.String
	TranscriptEvents   field.String
	Platform           field.String
	NatureType         field.String
	Team               field.String
	Description        field.String
	DescriptionHTML    field.String
	ScreenPath         field.String
	ScreenPathHTML     field.String
	PropertiesDesc     field.String
	PropertiesDescHTML field.String
	CommentHTML        field.String
	SectionCode        field.String
	SectionName        field.String
	CategoryCode       field.String
	CategoryName       field.String
	MinVersion         field.String
	MaxVersion         field.String
	EventType          field.String
	Tags               field.String
	Module             field.String
	Flow               field.String
	EventForAnalytic   field.String
	UsersSession       field.Field
	EventsSession      field.Field
	Users              field.Field
	Events             field.Field

	fieldMap map[string]field.Expr
}

func (d dmikAggMarketing) Table(newTableName string) *dmikAggMarketing {
	d.dmikAggMarketingDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dmikAggMarketing) As(alias string) *dmikAggMarketing {
	d.dmikAggMarketingDo.DO = *(d.dmikAggMarketingDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dmikAggMarketing) updateTableName(table string) *dmikAggMarketing {
	d.ALL = field.NewAsterisk(table)
	d.DateEvent = field.NewTime(table, "date_event")
	d.EventName = field.NewString(table, "event_name")
	d.OsName = field.NewString(table, "os_name")
	d.Product = field.NewString(table, "product")
	d.Object = field.NewString(table, "object")
	d.Utm = field.NewString(table, "utm")
	d.MediaSource = field.NewString(table, "media_source")
	d.UtmSource = field.NewString(table, "utm_source")
	d.UtmMedium = field.NewString(table, "utm_medium")
	d.UtmCampaign = field.NewString(table, "utm_campaign")
	d.UtmTerm = field.NewString(table, "utm_term")
	d.UtmContent = field.NewString(table, "utm_content")
	d.Id6 = field.NewString(table, "id_6")
	d.Id64 = field.NewString(table, "id_6_4")
	d.Id4 = field.NewString(table, "id_4")
	d.IDPerformance = field.NewString(table, "id_performance")
	d.IDText = field.NewString(table, "id_text")
	d.Rk = field.NewString(table, "rk")
	d.TranscriptEvents = field.NewString(table, "transcript_events")
	d.Platform = field.NewString(table, "platform")
	d.NatureType = field.NewString(table, "nature_type")
	d.Team = field.NewString(table, "team")
	d.Description = field.NewString(table, "description")
	d.DescriptionHTML = field.NewString(table, "description_html")
	d.ScreenPath = field.NewString(table, "screen_path")
	d.ScreenPathHTML = field.NewString(table, "screen_path_html")
	d.PropertiesDesc = field.NewString(table, "properties_desc")
	d.PropertiesDescHTML = field.NewString(table, "properties_desc_html")
	d.CommentHTML = field.NewString(table, "comment_html")
	d.SectionCode = field.NewString(table, "section_code")
	d.SectionName = field.NewString(table, "section_name")
	d.CategoryCode = field.NewString(table, "category_code")
	d.CategoryName = field.NewString(table, "category_name")
	d.MinVersion = field.NewString(table, "min_version")
	d.MaxVersion = field.NewString(table, "max_version")
	d.EventType = field.NewString(table, "event_type")
	d.Tags = field.NewString(table, "tags")
	d.Module = field.NewString(table, "module")
	d.Flow = field.NewString(table, "flow")
	d.EventForAnalytic = field.NewString(table, "event_for_analytic")
	d.UsersSession = field.NewField(table, "users_session")
	d.EventsSession = field.NewField(table, "events_session")
	d.Users = field.NewField(table, "users")
	d.Events = field.NewField(table, "events")

	d.fillFieldMap()

	return d
}

func (d *dmikAggMarketing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dmikAggMarketing) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 44)
	d.fieldMap["date_event"] = d.DateEvent
	d.fieldMap["event_name"] = d.EventName
	d.fieldMap["os_name"] = d.OsName
	d.fieldMap["product"] = d.Product
	d.fieldMap["object"] = d.Object
	d.fieldMap["utm"] = d.Utm
	d.fieldMap["media_source"] = d.MediaSource
	d.fieldMap["utm_source"] = d.UtmSource
	d.fieldMap["utm_medium"] = d.UtmMedium
	d.fieldMap["utm_campaign"] = d.UtmCampaign
	d.fieldMap["utm_term"] = d.UtmTerm
	d.fieldMap["utm_content"] = d.UtmContent
	d.fieldMap["id_6"] = d.Id6
	d.fieldMap["id_6_4"] = d.Id64
	d.fieldMap["id_4"] = d.Id4
	d.fieldMap["id_performance"] = d.IDPerformance
	d.fieldMap["id_text"] = d.IDText
	d.fieldMap["rk"] = d.Rk
	d.fieldMap["transcript_events"] = d.TranscriptEvents
	d.fieldMap["platform"] = d.Platform
	d.fieldMap["nature_type"] = d.NatureType
	d.fieldMap["team"] = d.Team
	d.fieldMap["description"] = d.Description
	d.fieldMap["description_html"] = d.DescriptionHTML
	d.fieldMap["screen_path"] = d.ScreenPath
	d.fieldMap["screen_path_html"] = d.ScreenPathHTML
	d.fieldMap["properties_desc"] = d.PropertiesDesc
	d.fieldMap["properties_desc_html"] = d.PropertiesDescHTML
	d.fieldMap["comment_html"] = d.CommentHTML
	d.fieldMap["section_code"] = d.SectionCode
	d.fieldMap["section_name"] = d.SectionName
	d.fieldMap["category_code"] = d.CategoryCode
	d.fieldMap["category_name"] = d.CategoryName
	d.fieldMap["min_version"] = d.MinVersion
	d.fieldMap["max_version"] = d.MaxVersion
	d.fieldMap["event_type"] = d.EventType
	d.fieldMap["tags"] = d.Tags
	d.fieldMap["module"] = d.Module
	d.fieldMap["flow"] = d.Flow
	d.fieldMap["event_for_analytic"] = d.EventForAnalytic
	d.fieldMap["users_session"] = d.UsersSession
	d.fieldMap["events_session"] = d.EventsSession
	d.fieldMap["users"] = d.Users
	d.fieldMap["events"] = d.Events
}

func (d dmikAggMarketing) clone(db *gorm.DB) dmikAggMarketing {
	d.dmikAggMarketingDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dmikAggMarketing) replaceDB(db *gorm.DB) dmikAggMarketing {
	d.dmikAggMarketingDo.ReplaceDB(db)
	return d
}

type dmikAggMarketingDo struct{ gen.DO }

type IDmikAggMarketingDo interface {
	gen.SubQuery
	Debug() IDmikAggMarketingDo
	WithContext(ctx context.Context) IDmikAggMarketingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDmikAggMarketingDo
	WriteDB() IDmikAggMarketingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDmikAggMarketingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDmikAggMarketingDo
	Not(conds ...gen.Condition) IDmikAggMarketingDo
	Or(conds ...gen.Condition) IDmikAggMarketingDo
	Select(conds ...field.Expr) IDmikAggMarketingDo
	Where(conds ...gen.Condition) IDmikAggMarketingDo
	Order(conds ...field.Expr) IDmikAggMarketingDo
	Distinct(cols ...field.Expr) IDmikAggMarketingDo
	Omit(cols ...field.Expr) IDmikAggMarketingDo
	Join(table schema.Tabler, on ...field.Expr) IDmikAggMarketingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDmikAggMarketingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDmikAggMarketingDo
	Group(cols ...field.Expr) IDmikAggMarketingDo
	Having(conds ...gen.Condition) IDmikAggMarketingDo
	Limit(limit int) IDmikAggMarketingDo
	Offset(offset int) IDmikAggMarketingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDmikAggMarketingDo
	Unscoped() IDmikAggMarketingDo
	Create(values ...*model.DmikAggMarketing) error
	CreateInBatches(values []*model.DmikAggMarketing, batchSize int) error
	Save(values ...*model.DmikAggMarketing) error
	First() (*model.DmikAggMarketing, error)
	Take() (*model.DmikAggMarketing, error)
	Last() (*model.DmikAggMarketing, error)
	Find() ([]*model.DmikAggMarketing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DmikAggMarketing, err error)
	FindInBatches(result *[]*model.DmikAggMarketing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DmikAggMarketing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDmikAggMarketingDo
	Assign(attrs ...field.AssignExpr) IDmikAggMarketingDo
	Joins(fields ...field.RelationField) IDmikAggMarketingDo
	Preload(fields ...field.RelationField) IDmikAggMarketingDo
	FirstOrInit() (*model.DmikAggMarketing, error)
	FirstOrCreate() (*model.DmikAggMarketing, error)
	FindByPage(offset int, limit int) (result []*model.DmikAggMarketing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDmikAggMarketingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dmikAggMarketingDo) Debug() IDmikAggMarketingDo {
	return d.withDO(d.DO.Debug())
}

func (d dmikAggMarketingDo) WithContext(ctx context.Context) IDmikAggMarketingDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dmikAggMarketingDo) ReadDB() IDmikAggMarketingDo {
	return d.Clauses(dbresolver.Read)
}

func (d dmikAggMarketingDo) WriteDB() IDmikAggMarketingDo {
	return d.Clauses(dbresolver.Write)
}

func (d dmikAggMarketingDo) Session(config *gorm.Session) IDmikAggMarketingDo {
	return d.withDO(d.DO.Session(config))
}

func (d dmikAggMarketingDo) Clauses(conds ...clause.Expression) IDmikAggMarketingDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dmikAggMarketingDo) Returning(value interface{}, columns ...string) IDmikAggMarketingDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dmikAggMarketingDo) Not(conds ...gen.Condition) IDmikAggMarketingDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dmikAggMarketingDo) Or(conds ...gen.Condition) IDmikAggMarketingDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dmikAggMarketingDo) Select(conds ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dmikAggMarketingDo) Where(conds ...gen.Condition) IDmikAggMarketingDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dmikAggMarketingDo) Order(conds ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dmikAggMarketingDo) Distinct(cols ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dmikAggMarketingDo) Omit(cols ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dmikAggMarketingDo) Join(table schema.Tabler, on ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dmikAggMarketingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dmikAggMarketingDo) RightJoin(table schema.Tabler, on ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dmikAggMarketingDo) Group(cols ...field.Expr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dmikAggMarketingDo) Having(conds ...gen.Condition) IDmikAggMarketingDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dmikAggMarketingDo) Limit(limit int) IDmikAggMarketingDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dmikAggMarketingDo) Offset(offset int) IDmikAggMarketingDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dmikAggMarketingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDmikAggMarketingDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dmikAggMarketingDo) Unscoped() IDmikAggMarketingDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dmikAggMarketingDo) Create(values ...*model.DmikAggMarketing) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dmikAggMarketingDo) CreateInBatches(values []*model.DmikAggMarketing, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dmikAggMarketingDo) Save(values ...*model.DmikAggMarketing) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dmikAggMarketingDo) First() (*model.DmikAggMarketing, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmikAggMarketing), nil
	}
}

func (d dmikAggMarketingDo) Take() (*model.DmikAggMarketing, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmikAggMarketing), nil
	}
}

func (d dmikAggMarketingDo) Last() (*model.DmikAggMarketing, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmikAggMarketing), nil
	}
}

func (d dmikAggMarketingDo) Find() ([]*model.DmikAggMarketing, error) {
	result, err := d.DO.Find()
	return result.([]*model.DmikAggMarketing), err
}

func (d dmikAggMarketingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DmikAggMarketing, err error) {
	buf := make([]*model.DmikAggMarketing, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dmikAggMarketingDo) FindInBatches(result *[]*model.DmikAggMarketing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dmikAggMarketingDo) Attrs(attrs ...field.AssignExpr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dmikAggMarketingDo) Assign(attrs ...field.AssignExpr) IDmikAggMarketingDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dmikAggMarketingDo) Joins(fields ...field.RelationField) IDmikAggMarketingDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dmikAggMarketingDo) Preload(fields ...field.RelationField) IDmikAggMarketingDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dmikAggMarketingDo) FirstOrInit() (*model.DmikAggMarketing, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmikAggMarketing), nil
	}
}

func (d dmikAggMarketingDo) FirstOrCreate() (*model.DmikAggMarketing, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DmikAggMarketing), nil
	}
}

func (d dmikAggMarketingDo) FindByPage(offset int, limit int) (result []*model.DmikAggMarketing, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dmikAggMarketingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dmikAggMarketingDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dmikAggMarketingDo) Delete(models ...*model.DmikAggMarketing) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dmikAggMarketingDo) withDO(do gen.Dao) *dmikAggMarketingDo {
	d.DO = *do.(*gen.DO)
	return d
}

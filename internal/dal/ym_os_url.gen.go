// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newYmOsURL(db *gorm.DB, opts ...gen.DOOption) ymOsURL {
	_ymOsURL := ymOsURL{}

	_ymOsURL.ymOsURLDo.UseDB(db, opts...)
	_ymOsURL.ymOsURLDo.UseModel(&model.YmOsURL{})

	tableName := _ymOsURL.ymOsURLDo.TableName()
	_ymOsURL.ALL = field.NewAsterisk(tableName)
	_ymOsURL.PageViewDate = field.NewTime(tableName, "page_view_date")
	_ymOsURL.PagePath = field.NewString(tableName, "page_path")
	_ymOsURL.Pageviews = field.NewInt32(tableName, "pageviews")
	_ymOsURL.Users = field.NewInt32(tableName, "users")
	_ymOsURL.ID = field.NewInt32(tableName, "id")
	_ymOsURL.OperatingSystemsGroup = field.NewString(tableName, "operating_systems_group")

	_ymOsURL.fillFieldMap()

	return _ymOsURL
}

type ymOsURL struct {
	ymOsURLDo

	ALL                   field.Asterisk
	PageViewDate          field.Time
	PagePath              field.String
	Pageviews             field.Int32
	Users                 field.Int32
	ID                    field.Int32
	OperatingSystemsGroup field.String

	fieldMap map[string]field.Expr
}

func (y ymOsURL) Table(newTableName string) *ymOsURL {
	y.ymOsURLDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y ymOsURL) As(alias string) *ymOsURL {
	y.ymOsURLDo.DO = *(y.ymOsURLDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *ymOsURL) updateTableName(table string) *ymOsURL {
	y.ALL = field.NewAsterisk(table)
	y.PageViewDate = field.NewTime(table, "page_view_date")
	y.PagePath = field.NewString(table, "page_path")
	y.Pageviews = field.NewInt32(table, "pageviews")
	y.Users = field.NewInt32(table, "users")
	y.ID = field.NewInt32(table, "id")
	y.OperatingSystemsGroup = field.NewString(table, "operating_systems_group")

	y.fillFieldMap()

	return y
}

func (y *ymOsURL) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *ymOsURL) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 6)
	y.fieldMap["page_view_date"] = y.PageViewDate
	y.fieldMap["page_path"] = y.PagePath
	y.fieldMap["pageviews"] = y.Pageviews
	y.fieldMap["users"] = y.Users
	y.fieldMap["id"] = y.ID
	y.fieldMap["operating_systems_group"] = y.OperatingSystemsGroup
}

func (y ymOsURL) clone(db *gorm.DB) ymOsURL {
	y.ymOsURLDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y ymOsURL) replaceDB(db *gorm.DB) ymOsURL {
	y.ymOsURLDo.ReplaceDB(db)
	return y
}

type ymOsURLDo struct{ gen.DO }

type IYmOsURLDo interface {
	gen.SubQuery
	Debug() IYmOsURLDo
	WithContext(ctx context.Context) IYmOsURLDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYmOsURLDo
	WriteDB() IYmOsURLDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYmOsURLDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYmOsURLDo
	Not(conds ...gen.Condition) IYmOsURLDo
	Or(conds ...gen.Condition) IYmOsURLDo
	Select(conds ...field.Expr) IYmOsURLDo
	Where(conds ...gen.Condition) IYmOsURLDo
	Order(conds ...field.Expr) IYmOsURLDo
	Distinct(cols ...field.Expr) IYmOsURLDo
	Omit(cols ...field.Expr) IYmOsURLDo
	Join(table schema.Tabler, on ...field.Expr) IYmOsURLDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYmOsURLDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYmOsURLDo
	Group(cols ...field.Expr) IYmOsURLDo
	Having(conds ...gen.Condition) IYmOsURLDo
	Limit(limit int) IYmOsURLDo
	Offset(offset int) IYmOsURLDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYmOsURLDo
	Unscoped() IYmOsURLDo
	Create(values ...*model.YmOsURL) error
	CreateInBatches(values []*model.YmOsURL, batchSize int) error
	Save(values ...*model.YmOsURL) error
	First() (*model.YmOsURL, error)
	Take() (*model.YmOsURL, error)
	Last() (*model.YmOsURL, error)
	Find() ([]*model.YmOsURL, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmOsURL, err error)
	FindInBatches(result *[]*model.YmOsURL, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YmOsURL) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYmOsURLDo
	Assign(attrs ...field.AssignExpr) IYmOsURLDo
	Joins(fields ...field.RelationField) IYmOsURLDo
	Preload(fields ...field.RelationField) IYmOsURLDo
	FirstOrInit() (*model.YmOsURL, error)
	FirstOrCreate() (*model.YmOsURL, error)
	FindByPage(offset int, limit int) (result []*model.YmOsURL, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYmOsURLDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y ymOsURLDo) Debug() IYmOsURLDo {
	return y.withDO(y.DO.Debug())
}

func (y ymOsURLDo) WithContext(ctx context.Context) IYmOsURLDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y ymOsURLDo) ReadDB() IYmOsURLDo {
	return y.Clauses(dbresolver.Read)
}

func (y ymOsURLDo) WriteDB() IYmOsURLDo {
	return y.Clauses(dbresolver.Write)
}

func (y ymOsURLDo) Session(config *gorm.Session) IYmOsURLDo {
	return y.withDO(y.DO.Session(config))
}

func (y ymOsURLDo) Clauses(conds ...clause.Expression) IYmOsURLDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y ymOsURLDo) Returning(value interface{}, columns ...string) IYmOsURLDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y ymOsURLDo) Not(conds ...gen.Condition) IYmOsURLDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y ymOsURLDo) Or(conds ...gen.Condition) IYmOsURLDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y ymOsURLDo) Select(conds ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y ymOsURLDo) Where(conds ...gen.Condition) IYmOsURLDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y ymOsURLDo) Order(conds ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y ymOsURLDo) Distinct(cols ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y ymOsURLDo) Omit(cols ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y ymOsURLDo) Join(table schema.Tabler, on ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y ymOsURLDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y ymOsURLDo) RightJoin(table schema.Tabler, on ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y ymOsURLDo) Group(cols ...field.Expr) IYmOsURLDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y ymOsURLDo) Having(conds ...gen.Condition) IYmOsURLDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y ymOsURLDo) Limit(limit int) IYmOsURLDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y ymOsURLDo) Offset(offset int) IYmOsURLDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y ymOsURLDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYmOsURLDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y ymOsURLDo) Unscoped() IYmOsURLDo {
	return y.withDO(y.DO.Unscoped())
}

func (y ymOsURLDo) Create(values ...*model.YmOsURL) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y ymOsURLDo) CreateInBatches(values []*model.YmOsURL, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y ymOsURLDo) Save(values ...*model.YmOsURL) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y ymOsURLDo) First() (*model.YmOsURL, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOsURL), nil
	}
}

func (y ymOsURLDo) Take() (*model.YmOsURL, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOsURL), nil
	}
}

func (y ymOsURLDo) Last() (*model.YmOsURL, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOsURL), nil
	}
}

func (y ymOsURLDo) Find() ([]*model.YmOsURL, error) {
	result, err := y.DO.Find()
	return result.([]*model.YmOsURL), err
}

func (y ymOsURLDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmOsURL, err error) {
	buf := make([]*model.YmOsURL, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y ymOsURLDo) FindInBatches(result *[]*model.YmOsURL, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y ymOsURLDo) Attrs(attrs ...field.AssignExpr) IYmOsURLDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y ymOsURLDo) Assign(attrs ...field.AssignExpr) IYmOsURLDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y ymOsURLDo) Joins(fields ...field.RelationField) IYmOsURLDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y ymOsURLDo) Preload(fields ...field.RelationField) IYmOsURLDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y ymOsURLDo) FirstOrInit() (*model.YmOsURL, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOsURL), nil
	}
}

func (y ymOsURLDo) FirstOrCreate() (*model.YmOsURL, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOsURL), nil
	}
}

func (y ymOsURLDo) FindByPage(offset int, limit int) (result []*model.YmOsURL, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y ymOsURLDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y ymOsURLDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y ymOsURLDo) Delete(models ...*model.YmOsURL) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *ymOsURLDo) withDO(do gen.Dao) *ymOsURLDo {
	y.DO = *do.(*gen.DO)
	return y
}

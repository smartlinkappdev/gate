// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newSharedSlDatum(db *gorm.DB, opts ...gen.DOOption) sharedSlDatum {
	_sharedSlDatum := sharedSlDatum{}

	_sharedSlDatum.sharedSlDatumDo.UseDB(db, opts...)
	_sharedSlDatum.sharedSlDatumDo.UseModel(&model.SharedSlDatum{})

	tableName := _sharedSlDatum.sharedSlDatumDo.TableName()
	_sharedSlDatum.ALL = field.NewAsterisk(tableName)
	_sharedSlDatum.ID = field.NewString(tableName, "id")
	_sharedSlDatum.SlDataID = field.NewString(tableName, "sl_dataId")
	_sharedSlDatum.OwnerUserID = field.NewString(tableName, "ownerUserId")
	_sharedSlDatum.SharedWithUserID = field.NewString(tableName, "sharedWithUserId")
	_sharedSlDatum.SharedAt = field.NewTime(tableName, "sharedAt")

	_sharedSlDatum.fillFieldMap()

	return _sharedSlDatum
}

type sharedSlDatum struct {
	sharedSlDatumDo

	ALL              field.Asterisk
	ID               field.String
	SlDataID         field.String
	OwnerUserID      field.String
	SharedWithUserID field.String
	SharedAt         field.Time

	fieldMap map[string]field.Expr
}

func (s sharedSlDatum) Table(newTableName string) *sharedSlDatum {
	s.sharedSlDatumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sharedSlDatum) As(alias string) *sharedSlDatum {
	s.sharedSlDatumDo.DO = *(s.sharedSlDatumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sharedSlDatum) updateTableName(table string) *sharedSlDatum {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.SlDataID = field.NewString(table, "sl_dataId")
	s.OwnerUserID = field.NewString(table, "ownerUserId")
	s.SharedWithUserID = field.NewString(table, "sharedWithUserId")
	s.SharedAt = field.NewTime(table, "sharedAt")

	s.fillFieldMap()

	return s
}

func (s *sharedSlDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sharedSlDatum) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["sl_dataId"] = s.SlDataID
	s.fieldMap["ownerUserId"] = s.OwnerUserID
	s.fieldMap["sharedWithUserId"] = s.SharedWithUserID
	s.fieldMap["sharedAt"] = s.SharedAt
}

func (s sharedSlDatum) clone(db *gorm.DB) sharedSlDatum {
	s.sharedSlDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sharedSlDatum) replaceDB(db *gorm.DB) sharedSlDatum {
	s.sharedSlDatumDo.ReplaceDB(db)
	return s
}

type sharedSlDatumDo struct{ gen.DO }

type ISharedSlDatumDo interface {
	gen.SubQuery
	Debug() ISharedSlDatumDo
	WithContext(ctx context.Context) ISharedSlDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISharedSlDatumDo
	WriteDB() ISharedSlDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISharedSlDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISharedSlDatumDo
	Not(conds ...gen.Condition) ISharedSlDatumDo
	Or(conds ...gen.Condition) ISharedSlDatumDo
	Select(conds ...field.Expr) ISharedSlDatumDo
	Where(conds ...gen.Condition) ISharedSlDatumDo
	Order(conds ...field.Expr) ISharedSlDatumDo
	Distinct(cols ...field.Expr) ISharedSlDatumDo
	Omit(cols ...field.Expr) ISharedSlDatumDo
	Join(table schema.Tabler, on ...field.Expr) ISharedSlDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISharedSlDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISharedSlDatumDo
	Group(cols ...field.Expr) ISharedSlDatumDo
	Having(conds ...gen.Condition) ISharedSlDatumDo
	Limit(limit int) ISharedSlDatumDo
	Offset(offset int) ISharedSlDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISharedSlDatumDo
	Unscoped() ISharedSlDatumDo
	Create(values ...*model.SharedSlDatum) error
	CreateInBatches(values []*model.SharedSlDatum, batchSize int) error
	Save(values ...*model.SharedSlDatum) error
	First() (*model.SharedSlDatum, error)
	Take() (*model.SharedSlDatum, error)
	Last() (*model.SharedSlDatum, error)
	Find() ([]*model.SharedSlDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SharedSlDatum, err error)
	FindInBatches(result *[]*model.SharedSlDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SharedSlDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISharedSlDatumDo
	Assign(attrs ...field.AssignExpr) ISharedSlDatumDo
	Joins(fields ...field.RelationField) ISharedSlDatumDo
	Preload(fields ...field.RelationField) ISharedSlDatumDo
	FirstOrInit() (*model.SharedSlDatum, error)
	FirstOrCreate() (*model.SharedSlDatum, error)
	FindByPage(offset int, limit int) (result []*model.SharedSlDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISharedSlDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sharedSlDatumDo) Debug() ISharedSlDatumDo {
	return s.withDO(s.DO.Debug())
}

func (s sharedSlDatumDo) WithContext(ctx context.Context) ISharedSlDatumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sharedSlDatumDo) ReadDB() ISharedSlDatumDo {
	return s.Clauses(dbresolver.Read)
}

func (s sharedSlDatumDo) WriteDB() ISharedSlDatumDo {
	return s.Clauses(dbresolver.Write)
}

func (s sharedSlDatumDo) Session(config *gorm.Session) ISharedSlDatumDo {
	return s.withDO(s.DO.Session(config))
}

func (s sharedSlDatumDo) Clauses(conds ...clause.Expression) ISharedSlDatumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sharedSlDatumDo) Returning(value interface{}, columns ...string) ISharedSlDatumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sharedSlDatumDo) Not(conds ...gen.Condition) ISharedSlDatumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sharedSlDatumDo) Or(conds ...gen.Condition) ISharedSlDatumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sharedSlDatumDo) Select(conds ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sharedSlDatumDo) Where(conds ...gen.Condition) ISharedSlDatumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sharedSlDatumDo) Order(conds ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sharedSlDatumDo) Distinct(cols ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sharedSlDatumDo) Omit(cols ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sharedSlDatumDo) Join(table schema.Tabler, on ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sharedSlDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sharedSlDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sharedSlDatumDo) Group(cols ...field.Expr) ISharedSlDatumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sharedSlDatumDo) Having(conds ...gen.Condition) ISharedSlDatumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sharedSlDatumDo) Limit(limit int) ISharedSlDatumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sharedSlDatumDo) Offset(offset int) ISharedSlDatumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sharedSlDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISharedSlDatumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sharedSlDatumDo) Unscoped() ISharedSlDatumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sharedSlDatumDo) Create(values ...*model.SharedSlDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sharedSlDatumDo) CreateInBatches(values []*model.SharedSlDatum, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sharedSlDatumDo) Save(values ...*model.SharedSlDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sharedSlDatumDo) First() (*model.SharedSlDatum, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedSlDatum), nil
	}
}

func (s sharedSlDatumDo) Take() (*model.SharedSlDatum, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedSlDatum), nil
	}
}

func (s sharedSlDatumDo) Last() (*model.SharedSlDatum, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedSlDatum), nil
	}
}

func (s sharedSlDatumDo) Find() ([]*model.SharedSlDatum, error) {
	result, err := s.DO.Find()
	return result.([]*model.SharedSlDatum), err
}

func (s sharedSlDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SharedSlDatum, err error) {
	buf := make([]*model.SharedSlDatum, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sharedSlDatumDo) FindInBatches(result *[]*model.SharedSlDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sharedSlDatumDo) Attrs(attrs ...field.AssignExpr) ISharedSlDatumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sharedSlDatumDo) Assign(attrs ...field.AssignExpr) ISharedSlDatumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sharedSlDatumDo) Joins(fields ...field.RelationField) ISharedSlDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sharedSlDatumDo) Preload(fields ...field.RelationField) ISharedSlDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sharedSlDatumDo) FirstOrInit() (*model.SharedSlDatum, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedSlDatum), nil
	}
}

func (s sharedSlDatumDo) FirstOrCreate() (*model.SharedSlDatum, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedSlDatum), nil
	}
}

func (s sharedSlDatumDo) FindByPage(offset int, limit int) (result []*model.SharedSlDatum, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sharedSlDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sharedSlDatumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sharedSlDatumDo) Delete(models ...*model.SharedSlDatum) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sharedSlDatumDo) withDO(do gen.Dao) *sharedSlDatumDo {
	s.DO = *do.(*gen.DO)
	return s
}

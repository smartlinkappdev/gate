// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                       = new(Query)
	Account                 *account
	NotificationSetting     *notificationSetting
	PasswordResetToken      *passwordResetToken
	PrismaMigration         *prismaMigration
	SharedSlDatum           *sharedSlDatum
	SlAnalytic              *slAnalytic
	SlDataHistory           *slDataHistory
	SlDataStat              *slDataStat
	SlDatum                 *slDatum
	SlURLStatus             *slURLStatus
	Smn                     *smn
	Test1                   *test1
	TwoFactorConfirmation   *twoFactorConfirmation
	TwoFactorToken          *twoFactorToken
	UploadedImage           *uploadedImage
	User                    *user
	UserGroup               *userGroup
	UserToUserGroup         *userToUserGroup
	VerificationToken       *verificationToken
	Ym                      *ym
	YmChartMetadatum        *ymChartMetadatum
	YmDataRaw               *ymDataRaw
	YmOperatingSystemsGroup *ymOperatingSystemsGroup
	YmOsURL                 *ymOsURL
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	NotificationSetting = &Q.NotificationSetting
	PasswordResetToken = &Q.PasswordResetToken
	PrismaMigration = &Q.PrismaMigration
	SharedSlDatum = &Q.SharedSlDatum
	SlAnalytic = &Q.SlAnalytic
	SlDataHistory = &Q.SlDataHistory
	SlDataStat = &Q.SlDataStat
	SlDatum = &Q.SlDatum
	SlURLStatus = &Q.SlURLStatus
	Smn = &Q.Smn
	Test1 = &Q.Test1
	TwoFactorConfirmation = &Q.TwoFactorConfirmation
	TwoFactorToken = &Q.TwoFactorToken
	UploadedImage = &Q.UploadedImage
	User = &Q.User
	UserGroup = &Q.UserGroup
	UserToUserGroup = &Q.UserToUserGroup
	VerificationToken = &Q.VerificationToken
	Ym = &Q.Ym
	YmChartMetadatum = &Q.YmChartMetadatum
	YmDataRaw = &Q.YmDataRaw
	YmOperatingSystemsGroup = &Q.YmOperatingSystemsGroup
	YmOsURL = &Q.YmOsURL
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                      db,
		Account:                 newAccount(db, opts...),
		NotificationSetting:     newNotificationSetting(db, opts...),
		PasswordResetToken:      newPasswordResetToken(db, opts...),
		PrismaMigration:         newPrismaMigration(db, opts...),
		SharedSlDatum:           newSharedSlDatum(db, opts...),
		SlAnalytic:              newSlAnalytic(db, opts...),
		SlDataHistory:           newSlDataHistory(db, opts...),
		SlDataStat:              newSlDataStat(db, opts...),
		SlDatum:                 newSlDatum(db, opts...),
		SlURLStatus:             newSlURLStatus(db, opts...),
		Smn:                     newSmn(db, opts...),
		Test1:                   newTest1(db, opts...),
		TwoFactorConfirmation:   newTwoFactorConfirmation(db, opts...),
		TwoFactorToken:          newTwoFactorToken(db, opts...),
		UploadedImage:           newUploadedImage(db, opts...),
		User:                    newUser(db, opts...),
		UserGroup:               newUserGroup(db, opts...),
		UserToUserGroup:         newUserToUserGroup(db, opts...),
		VerificationToken:       newVerificationToken(db, opts...),
		Ym:                      newYm(db, opts...),
		YmChartMetadatum:        newYmChartMetadatum(db, opts...),
		YmDataRaw:               newYmDataRaw(db, opts...),
		YmOperatingSystemsGroup: newYmOperatingSystemsGroup(db, opts...),
		YmOsURL:                 newYmOsURL(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account                 account
	NotificationSetting     notificationSetting
	PasswordResetToken      passwordResetToken
	PrismaMigration         prismaMigration
	SharedSlDatum           sharedSlDatum
	SlAnalytic              slAnalytic
	SlDataHistory           slDataHistory
	SlDataStat              slDataStat
	SlDatum                 slDatum
	SlURLStatus             slURLStatus
	Smn                     smn
	Test1                   test1
	TwoFactorConfirmation   twoFactorConfirmation
	TwoFactorToken          twoFactorToken
	UploadedImage           uploadedImage
	User                    user
	UserGroup               userGroup
	UserToUserGroup         userToUserGroup
	VerificationToken       verificationToken
	Ym                      ym
	YmChartMetadatum        ymChartMetadatum
	YmDataRaw               ymDataRaw
	YmOperatingSystemsGroup ymOperatingSystemsGroup
	YmOsURL                 ymOsURL
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		Account:                 q.Account.clone(db),
		NotificationSetting:     q.NotificationSetting.clone(db),
		PasswordResetToken:      q.PasswordResetToken.clone(db),
		PrismaMigration:         q.PrismaMigration.clone(db),
		SharedSlDatum:           q.SharedSlDatum.clone(db),
		SlAnalytic:              q.SlAnalytic.clone(db),
		SlDataHistory:           q.SlDataHistory.clone(db),
		SlDataStat:              q.SlDataStat.clone(db),
		SlDatum:                 q.SlDatum.clone(db),
		SlURLStatus:             q.SlURLStatus.clone(db),
		Smn:                     q.Smn.clone(db),
		Test1:                   q.Test1.clone(db),
		TwoFactorConfirmation:   q.TwoFactorConfirmation.clone(db),
		TwoFactorToken:          q.TwoFactorToken.clone(db),
		UploadedImage:           q.UploadedImage.clone(db),
		User:                    q.User.clone(db),
		UserGroup:               q.UserGroup.clone(db),
		UserToUserGroup:         q.UserToUserGroup.clone(db),
		VerificationToken:       q.VerificationToken.clone(db),
		Ym:                      q.Ym.clone(db),
		YmChartMetadatum:        q.YmChartMetadatum.clone(db),
		YmDataRaw:               q.YmDataRaw.clone(db),
		YmOperatingSystemsGroup: q.YmOperatingSystemsGroup.clone(db),
		YmOsURL:                 q.YmOsURL.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		Account:                 q.Account.replaceDB(db),
		NotificationSetting:     q.NotificationSetting.replaceDB(db),
		PasswordResetToken:      q.PasswordResetToken.replaceDB(db),
		PrismaMigration:         q.PrismaMigration.replaceDB(db),
		SharedSlDatum:           q.SharedSlDatum.replaceDB(db),
		SlAnalytic:              q.SlAnalytic.replaceDB(db),
		SlDataHistory:           q.SlDataHistory.replaceDB(db),
		SlDataStat:              q.SlDataStat.replaceDB(db),
		SlDatum:                 q.SlDatum.replaceDB(db),
		SlURLStatus:             q.SlURLStatus.replaceDB(db),
		Smn:                     q.Smn.replaceDB(db),
		Test1:                   q.Test1.replaceDB(db),
		TwoFactorConfirmation:   q.TwoFactorConfirmation.replaceDB(db),
		TwoFactorToken:          q.TwoFactorToken.replaceDB(db),
		UploadedImage:           q.UploadedImage.replaceDB(db),
		User:                    q.User.replaceDB(db),
		UserGroup:               q.UserGroup.replaceDB(db),
		UserToUserGroup:         q.UserToUserGroup.replaceDB(db),
		VerificationToken:       q.VerificationToken.replaceDB(db),
		Ym:                      q.Ym.replaceDB(db),
		YmChartMetadatum:        q.YmChartMetadatum.replaceDB(db),
		YmDataRaw:               q.YmDataRaw.replaceDB(db),
		YmOperatingSystemsGroup: q.YmOperatingSystemsGroup.replaceDB(db),
		YmOsURL:                 q.YmOsURL.replaceDB(db),
	}
}

type queryCtx struct {
	Account                 IAccountDo
	NotificationSetting     INotificationSettingDo
	PasswordResetToken      IPasswordResetTokenDo
	PrismaMigration         IPrismaMigrationDo
	SharedSlDatum           ISharedSlDatumDo
	SlAnalytic              ISlAnalyticDo
	SlDataHistory           ISlDataHistoryDo
	SlDataStat              ISlDataStatDo
	SlDatum                 ISlDatumDo
	SlURLStatus             ISlURLStatusDo
	Smn                     ISmnDo
	Test1                   ITest1Do
	TwoFactorConfirmation   ITwoFactorConfirmationDo
	TwoFactorToken          ITwoFactorTokenDo
	UploadedImage           IUploadedImageDo
	User                    IUserDo
	UserGroup               IUserGroupDo
	UserToUserGroup         IUserToUserGroupDo
	VerificationToken       IVerificationTokenDo
	Ym                      IYmDo
	YmChartMetadatum        IYmChartMetadatumDo
	YmDataRaw               IYmDataRawDo
	YmOperatingSystemsGroup IYmOperatingSystemsGroupDo
	YmOsURL                 IYmOsURLDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:                 q.Account.WithContext(ctx),
		NotificationSetting:     q.NotificationSetting.WithContext(ctx),
		PasswordResetToken:      q.PasswordResetToken.WithContext(ctx),
		PrismaMigration:         q.PrismaMigration.WithContext(ctx),
		SharedSlDatum:           q.SharedSlDatum.WithContext(ctx),
		SlAnalytic:              q.SlAnalytic.WithContext(ctx),
		SlDataHistory:           q.SlDataHistory.WithContext(ctx),
		SlDataStat:              q.SlDataStat.WithContext(ctx),
		SlDatum:                 q.SlDatum.WithContext(ctx),
		SlURLStatus:             q.SlURLStatus.WithContext(ctx),
		Smn:                     q.Smn.WithContext(ctx),
		Test1:                   q.Test1.WithContext(ctx),
		TwoFactorConfirmation:   q.TwoFactorConfirmation.WithContext(ctx),
		TwoFactorToken:          q.TwoFactorToken.WithContext(ctx),
		UploadedImage:           q.UploadedImage.WithContext(ctx),
		User:                    q.User.WithContext(ctx),
		UserGroup:               q.UserGroup.WithContext(ctx),
		UserToUserGroup:         q.UserToUserGroup.WithContext(ctx),
		VerificationToken:       q.VerificationToken.WithContext(ctx),
		Ym:                      q.Ym.WithContext(ctx),
		YmChartMetadatum:        q.YmChartMetadatum.WithContext(ctx),
		YmDataRaw:               q.YmDataRaw.WithContext(ctx),
		YmOperatingSystemsGroup: q.YmOperatingSystemsGroup.WithContext(ctx),
		YmOsURL:                 q.YmOsURL.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

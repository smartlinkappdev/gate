// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newYmOperatingSystemsGroup(db *gorm.DB, opts ...gen.DOOption) ymOperatingSystemsGroup {
	_ymOperatingSystemsGroup := ymOperatingSystemsGroup{}

	_ymOperatingSystemsGroup.ymOperatingSystemsGroupDo.UseDB(db, opts...)
	_ymOperatingSystemsGroup.ymOperatingSystemsGroupDo.UseModel(&model.YmOperatingSystemsGroup{})

	tableName := _ymOperatingSystemsGroup.ymOperatingSystemsGroupDo.TableName()
	_ymOperatingSystemsGroup.ALL = field.NewAsterisk(tableName)
	_ymOperatingSystemsGroup.PageViewDate = field.NewTime(tableName, "page_view_date")
	_ymOperatingSystemsGroup.OperatingSystemsGroup = field.NewString(tableName, "operating_systems_group")
	_ymOperatingSystemsGroup.Pageviews = field.NewInt32(tableName, "pageviews")
	_ymOperatingSystemsGroup.Users = field.NewInt32(tableName, "users")
	_ymOperatingSystemsGroup.ID = field.NewInt32(tableName, "id")

	_ymOperatingSystemsGroup.fillFieldMap()

	return _ymOperatingSystemsGroup
}

type ymOperatingSystemsGroup struct {
	ymOperatingSystemsGroupDo

	ALL                   field.Asterisk
	PageViewDate          field.Time
	OperatingSystemsGroup field.String
	Pageviews             field.Int32
	Users                 field.Int32
	ID                    field.Int32

	fieldMap map[string]field.Expr
}

func (y ymOperatingSystemsGroup) Table(newTableName string) *ymOperatingSystemsGroup {
	y.ymOperatingSystemsGroupDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y ymOperatingSystemsGroup) As(alias string) *ymOperatingSystemsGroup {
	y.ymOperatingSystemsGroupDo.DO = *(y.ymOperatingSystemsGroupDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *ymOperatingSystemsGroup) updateTableName(table string) *ymOperatingSystemsGroup {
	y.ALL = field.NewAsterisk(table)
	y.PageViewDate = field.NewTime(table, "page_view_date")
	y.OperatingSystemsGroup = field.NewString(table, "operating_systems_group")
	y.Pageviews = field.NewInt32(table, "pageviews")
	y.Users = field.NewInt32(table, "users")
	y.ID = field.NewInt32(table, "id")

	y.fillFieldMap()

	return y
}

func (y *ymOperatingSystemsGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *ymOperatingSystemsGroup) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 5)
	y.fieldMap["page_view_date"] = y.PageViewDate
	y.fieldMap["operating_systems_group"] = y.OperatingSystemsGroup
	y.fieldMap["pageviews"] = y.Pageviews
	y.fieldMap["users"] = y.Users
	y.fieldMap["id"] = y.ID
}

func (y ymOperatingSystemsGroup) clone(db *gorm.DB) ymOperatingSystemsGroup {
	y.ymOperatingSystemsGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y ymOperatingSystemsGroup) replaceDB(db *gorm.DB) ymOperatingSystemsGroup {
	y.ymOperatingSystemsGroupDo.ReplaceDB(db)
	return y
}

type ymOperatingSystemsGroupDo struct{ gen.DO }

type IYmOperatingSystemsGroupDo interface {
	gen.SubQuery
	Debug() IYmOperatingSystemsGroupDo
	WithContext(ctx context.Context) IYmOperatingSystemsGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYmOperatingSystemsGroupDo
	WriteDB() IYmOperatingSystemsGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYmOperatingSystemsGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYmOperatingSystemsGroupDo
	Not(conds ...gen.Condition) IYmOperatingSystemsGroupDo
	Or(conds ...gen.Condition) IYmOperatingSystemsGroupDo
	Select(conds ...field.Expr) IYmOperatingSystemsGroupDo
	Where(conds ...gen.Condition) IYmOperatingSystemsGroupDo
	Order(conds ...field.Expr) IYmOperatingSystemsGroupDo
	Distinct(cols ...field.Expr) IYmOperatingSystemsGroupDo
	Omit(cols ...field.Expr) IYmOperatingSystemsGroupDo
	Join(table schema.Tabler, on ...field.Expr) IYmOperatingSystemsGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYmOperatingSystemsGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYmOperatingSystemsGroupDo
	Group(cols ...field.Expr) IYmOperatingSystemsGroupDo
	Having(conds ...gen.Condition) IYmOperatingSystemsGroupDo
	Limit(limit int) IYmOperatingSystemsGroupDo
	Offset(offset int) IYmOperatingSystemsGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYmOperatingSystemsGroupDo
	Unscoped() IYmOperatingSystemsGroupDo
	Create(values ...*model.YmOperatingSystemsGroup) error
	CreateInBatches(values []*model.YmOperatingSystemsGroup, batchSize int) error
	Save(values ...*model.YmOperatingSystemsGroup) error
	First() (*model.YmOperatingSystemsGroup, error)
	Take() (*model.YmOperatingSystemsGroup, error)
	Last() (*model.YmOperatingSystemsGroup, error)
	Find() ([]*model.YmOperatingSystemsGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmOperatingSystemsGroup, err error)
	FindInBatches(result *[]*model.YmOperatingSystemsGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YmOperatingSystemsGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYmOperatingSystemsGroupDo
	Assign(attrs ...field.AssignExpr) IYmOperatingSystemsGroupDo
	Joins(fields ...field.RelationField) IYmOperatingSystemsGroupDo
	Preload(fields ...field.RelationField) IYmOperatingSystemsGroupDo
	FirstOrInit() (*model.YmOperatingSystemsGroup, error)
	FirstOrCreate() (*model.YmOperatingSystemsGroup, error)
	FindByPage(offset int, limit int) (result []*model.YmOperatingSystemsGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYmOperatingSystemsGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y ymOperatingSystemsGroupDo) Debug() IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Debug())
}

func (y ymOperatingSystemsGroupDo) WithContext(ctx context.Context) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y ymOperatingSystemsGroupDo) ReadDB() IYmOperatingSystemsGroupDo {
	return y.Clauses(dbresolver.Read)
}

func (y ymOperatingSystemsGroupDo) WriteDB() IYmOperatingSystemsGroupDo {
	return y.Clauses(dbresolver.Write)
}

func (y ymOperatingSystemsGroupDo) Session(config *gorm.Session) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Session(config))
}

func (y ymOperatingSystemsGroupDo) Clauses(conds ...clause.Expression) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y ymOperatingSystemsGroupDo) Returning(value interface{}, columns ...string) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y ymOperatingSystemsGroupDo) Not(conds ...gen.Condition) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y ymOperatingSystemsGroupDo) Or(conds ...gen.Condition) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y ymOperatingSystemsGroupDo) Select(conds ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y ymOperatingSystemsGroupDo) Where(conds ...gen.Condition) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y ymOperatingSystemsGroupDo) Order(conds ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y ymOperatingSystemsGroupDo) Distinct(cols ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y ymOperatingSystemsGroupDo) Omit(cols ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y ymOperatingSystemsGroupDo) Join(table schema.Tabler, on ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y ymOperatingSystemsGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y ymOperatingSystemsGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y ymOperatingSystemsGroupDo) Group(cols ...field.Expr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y ymOperatingSystemsGroupDo) Having(conds ...gen.Condition) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y ymOperatingSystemsGroupDo) Limit(limit int) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y ymOperatingSystemsGroupDo) Offset(offset int) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y ymOperatingSystemsGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y ymOperatingSystemsGroupDo) Unscoped() IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Unscoped())
}

func (y ymOperatingSystemsGroupDo) Create(values ...*model.YmOperatingSystemsGroup) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y ymOperatingSystemsGroupDo) CreateInBatches(values []*model.YmOperatingSystemsGroup, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y ymOperatingSystemsGroupDo) Save(values ...*model.YmOperatingSystemsGroup) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y ymOperatingSystemsGroupDo) First() (*model.YmOperatingSystemsGroup, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOperatingSystemsGroup), nil
	}
}

func (y ymOperatingSystemsGroupDo) Take() (*model.YmOperatingSystemsGroup, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOperatingSystemsGroup), nil
	}
}

func (y ymOperatingSystemsGroupDo) Last() (*model.YmOperatingSystemsGroup, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOperatingSystemsGroup), nil
	}
}

func (y ymOperatingSystemsGroupDo) Find() ([]*model.YmOperatingSystemsGroup, error) {
	result, err := y.DO.Find()
	return result.([]*model.YmOperatingSystemsGroup), err
}

func (y ymOperatingSystemsGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmOperatingSystemsGroup, err error) {
	buf := make([]*model.YmOperatingSystemsGroup, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y ymOperatingSystemsGroupDo) FindInBatches(result *[]*model.YmOperatingSystemsGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y ymOperatingSystemsGroupDo) Attrs(attrs ...field.AssignExpr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y ymOperatingSystemsGroupDo) Assign(attrs ...field.AssignExpr) IYmOperatingSystemsGroupDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y ymOperatingSystemsGroupDo) Joins(fields ...field.RelationField) IYmOperatingSystemsGroupDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y ymOperatingSystemsGroupDo) Preload(fields ...field.RelationField) IYmOperatingSystemsGroupDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y ymOperatingSystemsGroupDo) FirstOrInit() (*model.YmOperatingSystemsGroup, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOperatingSystemsGroup), nil
	}
}

func (y ymOperatingSystemsGroupDo) FirstOrCreate() (*model.YmOperatingSystemsGroup, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmOperatingSystemsGroup), nil
	}
}

func (y ymOperatingSystemsGroupDo) FindByPage(offset int, limit int) (result []*model.YmOperatingSystemsGroup, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y ymOperatingSystemsGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y ymOperatingSystemsGroupDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y ymOperatingSystemsGroupDo) Delete(models ...*model.YmOperatingSystemsGroup) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *ymOperatingSystemsGroupDo) withDO(do gen.Dao) *ymOperatingSystemsGroupDo {
	y.DO = *do.(*gen.DO)
	return y
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newUserToUserGroup(db *gorm.DB, opts ...gen.DOOption) userToUserGroup {
	_userToUserGroup := userToUserGroup{}

	_userToUserGroup.userToUserGroupDo.UseDB(db, opts...)
	_userToUserGroup.userToUserGroupDo.UseModel(&model.UserToUserGroup{})

	tableName := _userToUserGroup.userToUserGroupDo.TableName()
	_userToUserGroup.ALL = field.NewAsterisk(tableName)
	_userToUserGroup.A = field.NewString(tableName, "A")
	_userToUserGroup.B = field.NewString(tableName, "B")

	_userToUserGroup.fillFieldMap()

	return _userToUserGroup
}

type userToUserGroup struct {
	userToUserGroupDo

	ALL field.Asterisk
	A   field.String
	B   field.String

	fieldMap map[string]field.Expr
}

func (u userToUserGroup) Table(newTableName string) *userToUserGroup {
	u.userToUserGroupDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userToUserGroup) As(alias string) *userToUserGroup {
	u.userToUserGroupDo.DO = *(u.userToUserGroupDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userToUserGroup) updateTableName(table string) *userToUserGroup {
	u.ALL = field.NewAsterisk(table)
	u.A = field.NewString(table, "A")
	u.B = field.NewString(table, "B")

	u.fillFieldMap()

	return u
}

func (u *userToUserGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userToUserGroup) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["A"] = u.A
	u.fieldMap["B"] = u.B
}

func (u userToUserGroup) clone(db *gorm.DB) userToUserGroup {
	u.userToUserGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userToUserGroup) replaceDB(db *gorm.DB) userToUserGroup {
	u.userToUserGroupDo.ReplaceDB(db)
	return u
}

type userToUserGroupDo struct{ gen.DO }

type IUserToUserGroupDo interface {
	gen.SubQuery
	Debug() IUserToUserGroupDo
	WithContext(ctx context.Context) IUserToUserGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserToUserGroupDo
	WriteDB() IUserToUserGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserToUserGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserToUserGroupDo
	Not(conds ...gen.Condition) IUserToUserGroupDo
	Or(conds ...gen.Condition) IUserToUserGroupDo
	Select(conds ...field.Expr) IUserToUserGroupDo
	Where(conds ...gen.Condition) IUserToUserGroupDo
	Order(conds ...field.Expr) IUserToUserGroupDo
	Distinct(cols ...field.Expr) IUserToUserGroupDo
	Omit(cols ...field.Expr) IUserToUserGroupDo
	Join(table schema.Tabler, on ...field.Expr) IUserToUserGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserToUserGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserToUserGroupDo
	Group(cols ...field.Expr) IUserToUserGroupDo
	Having(conds ...gen.Condition) IUserToUserGroupDo
	Limit(limit int) IUserToUserGroupDo
	Offset(offset int) IUserToUserGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserToUserGroupDo
	Unscoped() IUserToUserGroupDo
	Create(values ...*model.UserToUserGroup) error
	CreateInBatches(values []*model.UserToUserGroup, batchSize int) error
	Save(values ...*model.UserToUserGroup) error
	First() (*model.UserToUserGroup, error)
	Take() (*model.UserToUserGroup, error)
	Last() (*model.UserToUserGroup, error)
	Find() ([]*model.UserToUserGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserToUserGroup, err error)
	FindInBatches(result *[]*model.UserToUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserToUserGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserToUserGroupDo
	Assign(attrs ...field.AssignExpr) IUserToUserGroupDo
	Joins(fields ...field.RelationField) IUserToUserGroupDo
	Preload(fields ...field.RelationField) IUserToUserGroupDo
	FirstOrInit() (*model.UserToUserGroup, error)
	FirstOrCreate() (*model.UserToUserGroup, error)
	FindByPage(offset int, limit int) (result []*model.UserToUserGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserToUserGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userToUserGroupDo) Debug() IUserToUserGroupDo {
	return u.withDO(u.DO.Debug())
}

func (u userToUserGroupDo) WithContext(ctx context.Context) IUserToUserGroupDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userToUserGroupDo) ReadDB() IUserToUserGroupDo {
	return u.Clauses(dbresolver.Read)
}

func (u userToUserGroupDo) WriteDB() IUserToUserGroupDo {
	return u.Clauses(dbresolver.Write)
}

func (u userToUserGroupDo) Session(config *gorm.Session) IUserToUserGroupDo {
	return u.withDO(u.DO.Session(config))
}

func (u userToUserGroupDo) Clauses(conds ...clause.Expression) IUserToUserGroupDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userToUserGroupDo) Returning(value interface{}, columns ...string) IUserToUserGroupDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userToUserGroupDo) Not(conds ...gen.Condition) IUserToUserGroupDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userToUserGroupDo) Or(conds ...gen.Condition) IUserToUserGroupDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userToUserGroupDo) Select(conds ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userToUserGroupDo) Where(conds ...gen.Condition) IUserToUserGroupDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userToUserGroupDo) Order(conds ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userToUserGroupDo) Distinct(cols ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userToUserGroupDo) Omit(cols ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userToUserGroupDo) Join(table schema.Tabler, on ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userToUserGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userToUserGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userToUserGroupDo) Group(cols ...field.Expr) IUserToUserGroupDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userToUserGroupDo) Having(conds ...gen.Condition) IUserToUserGroupDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userToUserGroupDo) Limit(limit int) IUserToUserGroupDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userToUserGroupDo) Offset(offset int) IUserToUserGroupDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userToUserGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserToUserGroupDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userToUserGroupDo) Unscoped() IUserToUserGroupDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userToUserGroupDo) Create(values ...*model.UserToUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userToUserGroupDo) CreateInBatches(values []*model.UserToUserGroup, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userToUserGroupDo) Save(values ...*model.UserToUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userToUserGroupDo) First() (*model.UserToUserGroup, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToUserGroup), nil
	}
}

func (u userToUserGroupDo) Take() (*model.UserToUserGroup, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToUserGroup), nil
	}
}

func (u userToUserGroupDo) Last() (*model.UserToUserGroup, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToUserGroup), nil
	}
}

func (u userToUserGroupDo) Find() ([]*model.UserToUserGroup, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserToUserGroup), err
}

func (u userToUserGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserToUserGroup, err error) {
	buf := make([]*model.UserToUserGroup, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userToUserGroupDo) FindInBatches(result *[]*model.UserToUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userToUserGroupDo) Attrs(attrs ...field.AssignExpr) IUserToUserGroupDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userToUserGroupDo) Assign(attrs ...field.AssignExpr) IUserToUserGroupDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userToUserGroupDo) Joins(fields ...field.RelationField) IUserToUserGroupDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userToUserGroupDo) Preload(fields ...field.RelationField) IUserToUserGroupDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userToUserGroupDo) FirstOrInit() (*model.UserToUserGroup, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToUserGroup), nil
	}
}

func (u userToUserGroupDo) FirstOrCreate() (*model.UserToUserGroup, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToUserGroup), nil
	}
}

func (u userToUserGroupDo) FindByPage(offset int, limit int) (result []*model.UserToUserGroup, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userToUserGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userToUserGroupDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userToUserGroupDo) Delete(models ...*model.UserToUserGroup) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userToUserGroupDo) withDO(do gen.Dao) *userToUserGroupDo {
	u.DO = *do.(*gen.DO)
	return u
}

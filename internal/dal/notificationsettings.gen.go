// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newNotificationSetting(db *gorm.DB, opts ...gen.DOOption) notificationSetting {
	_notificationSetting := notificationSetting{}

	_notificationSetting.notificationSettingDo.UseDB(db, opts...)
	_notificationSetting.notificationSettingDo.UseModel(&model.NotificationSetting{})

	tableName := _notificationSetting.notificationSettingDo.TableName()
	_notificationSetting.ALL = field.NewAsterisk(tableName)
	_notificationSetting.ID = field.NewString(tableName, "id")
	_notificationSetting.UserID = field.NewString(tableName, "userId")
	_notificationSetting.EntryCreated = field.NewBool(tableName, "entryCreated")
	_notificationSetting.EntryUpdated = field.NewBool(tableName, "entryUpdated")
	_notificationSetting.StatusChanged = field.NewBool(tableName, "statusChanged")

	_notificationSetting.fillFieldMap()

	return _notificationSetting
}

type notificationSetting struct {
	notificationSettingDo

	ALL           field.Asterisk
	ID            field.String
	UserID        field.String
	EntryCreated  field.Bool
	EntryUpdated  field.Bool
	StatusChanged field.Bool

	fieldMap map[string]field.Expr
}

func (n notificationSetting) Table(newTableName string) *notificationSetting {
	n.notificationSettingDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationSetting) As(alias string) *notificationSetting {
	n.notificationSettingDo.DO = *(n.notificationSettingDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationSetting) updateTableName(table string) *notificationSetting {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.UserID = field.NewString(table, "userId")
	n.EntryCreated = field.NewBool(table, "entryCreated")
	n.EntryUpdated = field.NewBool(table, "entryUpdated")
	n.StatusChanged = field.NewBool(table, "statusChanged")

	n.fillFieldMap()

	return n
}

func (n *notificationSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationSetting) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 5)
	n.fieldMap["id"] = n.ID
	n.fieldMap["userId"] = n.UserID
	n.fieldMap["entryCreated"] = n.EntryCreated
	n.fieldMap["entryUpdated"] = n.EntryUpdated
	n.fieldMap["statusChanged"] = n.StatusChanged
}

func (n notificationSetting) clone(db *gorm.DB) notificationSetting {
	n.notificationSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationSetting) replaceDB(db *gorm.DB) notificationSetting {
	n.notificationSettingDo.ReplaceDB(db)
	return n
}

type notificationSettingDo struct{ gen.DO }

type INotificationSettingDo interface {
	gen.SubQuery
	Debug() INotificationSettingDo
	WithContext(ctx context.Context) INotificationSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationSettingDo
	WriteDB() INotificationSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationSettingDo
	Not(conds ...gen.Condition) INotificationSettingDo
	Or(conds ...gen.Condition) INotificationSettingDo
	Select(conds ...field.Expr) INotificationSettingDo
	Where(conds ...gen.Condition) INotificationSettingDo
	Order(conds ...field.Expr) INotificationSettingDo
	Distinct(cols ...field.Expr) INotificationSettingDo
	Omit(cols ...field.Expr) INotificationSettingDo
	Join(table schema.Tabler, on ...field.Expr) INotificationSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationSettingDo
	Group(cols ...field.Expr) INotificationSettingDo
	Having(conds ...gen.Condition) INotificationSettingDo
	Limit(limit int) INotificationSettingDo
	Offset(offset int) INotificationSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationSettingDo
	Unscoped() INotificationSettingDo
	Create(values ...*model.NotificationSetting) error
	CreateInBatches(values []*model.NotificationSetting, batchSize int) error
	Save(values ...*model.NotificationSetting) error
	First() (*model.NotificationSetting, error)
	Take() (*model.NotificationSetting, error)
	Last() (*model.NotificationSetting, error)
	Find() ([]*model.NotificationSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationSetting, err error)
	FindInBatches(result *[]*model.NotificationSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotificationSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationSettingDo
	Assign(attrs ...field.AssignExpr) INotificationSettingDo
	Joins(fields ...field.RelationField) INotificationSettingDo
	Preload(fields ...field.RelationField) INotificationSettingDo
	FirstOrInit() (*model.NotificationSetting, error)
	FirstOrCreate() (*model.NotificationSetting, error)
	FindByPage(offset int, limit int) (result []*model.NotificationSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notificationSettingDo) Debug() INotificationSettingDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationSettingDo) WithContext(ctx context.Context) INotificationSettingDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationSettingDo) ReadDB() INotificationSettingDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationSettingDo) WriteDB() INotificationSettingDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationSettingDo) Session(config *gorm.Session) INotificationSettingDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationSettingDo) Clauses(conds ...clause.Expression) INotificationSettingDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationSettingDo) Returning(value interface{}, columns ...string) INotificationSettingDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationSettingDo) Not(conds ...gen.Condition) INotificationSettingDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationSettingDo) Or(conds ...gen.Condition) INotificationSettingDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationSettingDo) Select(conds ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationSettingDo) Where(conds ...gen.Condition) INotificationSettingDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationSettingDo) Order(conds ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationSettingDo) Distinct(cols ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationSettingDo) Omit(cols ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationSettingDo) Join(table schema.Tabler, on ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationSettingDo) Group(cols ...field.Expr) INotificationSettingDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationSettingDo) Having(conds ...gen.Condition) INotificationSettingDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationSettingDo) Limit(limit int) INotificationSettingDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationSettingDo) Offset(offset int) INotificationSettingDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationSettingDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationSettingDo) Unscoped() INotificationSettingDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationSettingDo) Create(values ...*model.NotificationSetting) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationSettingDo) CreateInBatches(values []*model.NotificationSetting, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationSettingDo) Save(values ...*model.NotificationSetting) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationSettingDo) First() (*model.NotificationSetting, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSetting), nil
	}
}

func (n notificationSettingDo) Take() (*model.NotificationSetting, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSetting), nil
	}
}

func (n notificationSettingDo) Last() (*model.NotificationSetting, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSetting), nil
	}
}

func (n notificationSettingDo) Find() ([]*model.NotificationSetting, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationSetting), err
}

func (n notificationSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationSetting, err error) {
	buf := make([]*model.NotificationSetting, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationSettingDo) FindInBatches(result *[]*model.NotificationSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationSettingDo) Attrs(attrs ...field.AssignExpr) INotificationSettingDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationSettingDo) Assign(attrs ...field.AssignExpr) INotificationSettingDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationSettingDo) Joins(fields ...field.RelationField) INotificationSettingDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationSettingDo) Preload(fields ...field.RelationField) INotificationSettingDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationSettingDo) FirstOrInit() (*model.NotificationSetting, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSetting), nil
	}
}

func (n notificationSettingDo) FirstOrCreate() (*model.NotificationSetting, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSetting), nil
	}
}

func (n notificationSettingDo) FindByPage(offset int, limit int) (result []*model.NotificationSetting, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationSettingDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationSettingDo) Delete(models ...*model.NotificationSetting) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationSettingDo) withDO(do gen.Dao) *notificationSettingDo {
	n.DO = *do.(*gen.DO)
	return n
}

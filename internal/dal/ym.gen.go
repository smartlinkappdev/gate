// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newYm(db *gorm.DB, opts ...gen.DOOption) ym {
	_ym := ym{}

	_ym.ymDo.UseDB(db, opts...)
	_ym.ymDo.UseModel(&model.Ym{})

	tableName := _ym.ymDo.TableName()
	_ym.ALL = field.NewAsterisk(tableName)
	_ym.Date = field.NewTime(tableName, "date")
	_ym.PageURL = field.NewString(tableName, "page_url")
	_ym.Os = field.NewString(tableName, "os")
	_ym.BrowserFamily = field.NewString(tableName, "browser_family")
	_ym.UtmSource = field.NewString(tableName, "utm_source")
	_ym.UtmMedium = field.NewString(tableName, "utm_medium")
	_ym.UtmCampaign = field.NewString(tableName, "utm_campaign")
	_ym.Views = field.NewInt32(tableName, "views")
	_ym.Users = field.NewInt32(tableName, "users")
	_ym.YesApp = field.NewFloat64(tableName, "yes_app")
	_ym.NoApp = field.NewFloat64(tableName, "no_app")
	_ym.Install = field.NewFloat64(tableName, "install")
	_ym.Login = field.NewFloat64(tableName, "login")
	_ym.Orders = field.NewFloat64(tableName, "orders")
	_ym.ID = field.NewInt32(tableName, "id")

	_ym.fillFieldMap()

	return _ym
}

type ym struct {
	ymDo

	ALL           field.Asterisk
	Date          field.Time
	PageURL       field.String
	Os            field.String
	BrowserFamily field.String
	UtmSource     field.String
	UtmMedium     field.String
	UtmCampaign   field.String
	Views         field.Int32
	Users         field.Int32
	YesApp        field.Float64
	NoApp         field.Float64
	Install       field.Float64
	Login         field.Float64
	Orders        field.Float64
	ID            field.Int32

	fieldMap map[string]field.Expr
}

func (y ym) Table(newTableName string) *ym {
	y.ymDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y ym) As(alias string) *ym {
	y.ymDo.DO = *(y.ymDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *ym) updateTableName(table string) *ym {
	y.ALL = field.NewAsterisk(table)
	y.Date = field.NewTime(table, "date")
	y.PageURL = field.NewString(table, "page_url")
	y.Os = field.NewString(table, "os")
	y.BrowserFamily = field.NewString(table, "browser_family")
	y.UtmSource = field.NewString(table, "utm_source")
	y.UtmMedium = field.NewString(table, "utm_medium")
	y.UtmCampaign = field.NewString(table, "utm_campaign")
	y.Views = field.NewInt32(table, "views")
	y.Users = field.NewInt32(table, "users")
	y.YesApp = field.NewFloat64(table, "yes_app")
	y.NoApp = field.NewFloat64(table, "no_app")
	y.Install = field.NewFloat64(table, "install")
	y.Login = field.NewFloat64(table, "login")
	y.Orders = field.NewFloat64(table, "orders")
	y.ID = field.NewInt32(table, "id")

	y.fillFieldMap()

	return y
}

func (y *ym) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *ym) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 15)
	y.fieldMap["date"] = y.Date
	y.fieldMap["page_url"] = y.PageURL
	y.fieldMap["os"] = y.Os
	y.fieldMap["browser_family"] = y.BrowserFamily
	y.fieldMap["utm_source"] = y.UtmSource
	y.fieldMap["utm_medium"] = y.UtmMedium
	y.fieldMap["utm_campaign"] = y.UtmCampaign
	y.fieldMap["views"] = y.Views
	y.fieldMap["users"] = y.Users
	y.fieldMap["yes_app"] = y.YesApp
	y.fieldMap["no_app"] = y.NoApp
	y.fieldMap["install"] = y.Install
	y.fieldMap["login"] = y.Login
	y.fieldMap["orders"] = y.Orders
	y.fieldMap["id"] = y.ID
}

func (y ym) clone(db *gorm.DB) ym {
	y.ymDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y ym) replaceDB(db *gorm.DB) ym {
	y.ymDo.ReplaceDB(db)
	return y
}

type ymDo struct{ gen.DO }

type IYmDo interface {
	gen.SubQuery
	Debug() IYmDo
	WithContext(ctx context.Context) IYmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYmDo
	WriteDB() IYmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYmDo
	Not(conds ...gen.Condition) IYmDo
	Or(conds ...gen.Condition) IYmDo
	Select(conds ...field.Expr) IYmDo
	Where(conds ...gen.Condition) IYmDo
	Order(conds ...field.Expr) IYmDo
	Distinct(cols ...field.Expr) IYmDo
	Omit(cols ...field.Expr) IYmDo
	Join(table schema.Tabler, on ...field.Expr) IYmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYmDo
	Group(cols ...field.Expr) IYmDo
	Having(conds ...gen.Condition) IYmDo
	Limit(limit int) IYmDo
	Offset(offset int) IYmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYmDo
	Unscoped() IYmDo
	Create(values ...*model.Ym) error
	CreateInBatches(values []*model.Ym, batchSize int) error
	Save(values ...*model.Ym) error
	First() (*model.Ym, error)
	Take() (*model.Ym, error)
	Last() (*model.Ym, error)
	Find() ([]*model.Ym, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ym, err error)
	FindInBatches(result *[]*model.Ym, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Ym) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYmDo
	Assign(attrs ...field.AssignExpr) IYmDo
	Joins(fields ...field.RelationField) IYmDo
	Preload(fields ...field.RelationField) IYmDo
	FirstOrInit() (*model.Ym, error)
	FirstOrCreate() (*model.Ym, error)
	FindByPage(offset int, limit int) (result []*model.Ym, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y ymDo) Debug() IYmDo {
	return y.withDO(y.DO.Debug())
}

func (y ymDo) WithContext(ctx context.Context) IYmDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y ymDo) ReadDB() IYmDo {
	return y.Clauses(dbresolver.Read)
}

func (y ymDo) WriteDB() IYmDo {
	return y.Clauses(dbresolver.Write)
}

func (y ymDo) Session(config *gorm.Session) IYmDo {
	return y.withDO(y.DO.Session(config))
}

func (y ymDo) Clauses(conds ...clause.Expression) IYmDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y ymDo) Returning(value interface{}, columns ...string) IYmDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y ymDo) Not(conds ...gen.Condition) IYmDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y ymDo) Or(conds ...gen.Condition) IYmDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y ymDo) Select(conds ...field.Expr) IYmDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y ymDo) Where(conds ...gen.Condition) IYmDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y ymDo) Order(conds ...field.Expr) IYmDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y ymDo) Distinct(cols ...field.Expr) IYmDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y ymDo) Omit(cols ...field.Expr) IYmDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y ymDo) Join(table schema.Tabler, on ...field.Expr) IYmDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y ymDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYmDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y ymDo) RightJoin(table schema.Tabler, on ...field.Expr) IYmDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y ymDo) Group(cols ...field.Expr) IYmDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y ymDo) Having(conds ...gen.Condition) IYmDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y ymDo) Limit(limit int) IYmDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y ymDo) Offset(offset int) IYmDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y ymDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYmDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y ymDo) Unscoped() IYmDo {
	return y.withDO(y.DO.Unscoped())
}

func (y ymDo) Create(values ...*model.Ym) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y ymDo) CreateInBatches(values []*model.Ym, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y ymDo) Save(values ...*model.Ym) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y ymDo) First() (*model.Ym, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ym), nil
	}
}

func (y ymDo) Take() (*model.Ym, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ym), nil
	}
}

func (y ymDo) Last() (*model.Ym, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ym), nil
	}
}

func (y ymDo) Find() ([]*model.Ym, error) {
	result, err := y.DO.Find()
	return result.([]*model.Ym), err
}

func (y ymDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ym, err error) {
	buf := make([]*model.Ym, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y ymDo) FindInBatches(result *[]*model.Ym, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y ymDo) Attrs(attrs ...field.AssignExpr) IYmDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y ymDo) Assign(attrs ...field.AssignExpr) IYmDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y ymDo) Joins(fields ...field.RelationField) IYmDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y ymDo) Preload(fields ...field.RelationField) IYmDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y ymDo) FirstOrInit() (*model.Ym, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ym), nil
	}
}

func (y ymDo) FirstOrCreate() (*model.Ym, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ym), nil
	}
}

func (y ymDo) FindByPage(offset int, limit int) (result []*model.Ym, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y ymDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y ymDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y ymDo) Delete(models ...*model.Ym) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *ymDo) withDO(do gen.Dao) *ymDo {
	y.DO = *do.(*gen.DO)
	return y
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newYmChartMetadatum(db *gorm.DB, opts ...gen.DOOption) ymChartMetadatum {
	_ymChartMetadatum := ymChartMetadatum{}

	_ymChartMetadatum.ymChartMetadatumDo.UseDB(db, opts...)
	_ymChartMetadatum.ymChartMetadatumDo.UseModel(&model.YmChartMetadatum{})

	tableName := _ymChartMetadatum.ymChartMetadatumDo.TableName()
	_ymChartMetadatum.ALL = field.NewAsterisk(tableName)
	_ymChartMetadatum.ID = field.NewInt32(tableName, "id")
	_ymChartMetadatum.Type = field.NewString(tableName, "type")
	_ymChartMetadatum.Name = field.NewString(tableName, "name")
	_ymChartMetadatum.Value = field.NewString(tableName, "value")

	_ymChartMetadatum.fillFieldMap()

	return _ymChartMetadatum
}

type ymChartMetadatum struct {
	ymChartMetadatumDo

	ALL   field.Asterisk
	ID    field.Int32
	Type  field.String
	Name  field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (y ymChartMetadatum) Table(newTableName string) *ymChartMetadatum {
	y.ymChartMetadatumDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y ymChartMetadatum) As(alias string) *ymChartMetadatum {
	y.ymChartMetadatumDo.DO = *(y.ymChartMetadatumDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *ymChartMetadatum) updateTableName(table string) *ymChartMetadatum {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt32(table, "id")
	y.Type = field.NewString(table, "type")
	y.Name = field.NewString(table, "name")
	y.Value = field.NewString(table, "value")

	y.fillFieldMap()

	return y
}

func (y *ymChartMetadatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *ymChartMetadatum) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 4)
	y.fieldMap["id"] = y.ID
	y.fieldMap["type"] = y.Type
	y.fieldMap["name"] = y.Name
	y.fieldMap["value"] = y.Value
}

func (y ymChartMetadatum) clone(db *gorm.DB) ymChartMetadatum {
	y.ymChartMetadatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y ymChartMetadatum) replaceDB(db *gorm.DB) ymChartMetadatum {
	y.ymChartMetadatumDo.ReplaceDB(db)
	return y
}

type ymChartMetadatumDo struct{ gen.DO }

type IYmChartMetadatumDo interface {
	gen.SubQuery
	Debug() IYmChartMetadatumDo
	WithContext(ctx context.Context) IYmChartMetadatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYmChartMetadatumDo
	WriteDB() IYmChartMetadatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYmChartMetadatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYmChartMetadatumDo
	Not(conds ...gen.Condition) IYmChartMetadatumDo
	Or(conds ...gen.Condition) IYmChartMetadatumDo
	Select(conds ...field.Expr) IYmChartMetadatumDo
	Where(conds ...gen.Condition) IYmChartMetadatumDo
	Order(conds ...field.Expr) IYmChartMetadatumDo
	Distinct(cols ...field.Expr) IYmChartMetadatumDo
	Omit(cols ...field.Expr) IYmChartMetadatumDo
	Join(table schema.Tabler, on ...field.Expr) IYmChartMetadatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYmChartMetadatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYmChartMetadatumDo
	Group(cols ...field.Expr) IYmChartMetadatumDo
	Having(conds ...gen.Condition) IYmChartMetadatumDo
	Limit(limit int) IYmChartMetadatumDo
	Offset(offset int) IYmChartMetadatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYmChartMetadatumDo
	Unscoped() IYmChartMetadatumDo
	Create(values ...*model.YmChartMetadatum) error
	CreateInBatches(values []*model.YmChartMetadatum, batchSize int) error
	Save(values ...*model.YmChartMetadatum) error
	First() (*model.YmChartMetadatum, error)
	Take() (*model.YmChartMetadatum, error)
	Last() (*model.YmChartMetadatum, error)
	Find() ([]*model.YmChartMetadatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmChartMetadatum, err error)
	FindInBatches(result *[]*model.YmChartMetadatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YmChartMetadatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYmChartMetadatumDo
	Assign(attrs ...field.AssignExpr) IYmChartMetadatumDo
	Joins(fields ...field.RelationField) IYmChartMetadatumDo
	Preload(fields ...field.RelationField) IYmChartMetadatumDo
	FirstOrInit() (*model.YmChartMetadatum, error)
	FirstOrCreate() (*model.YmChartMetadatum, error)
	FindByPage(offset int, limit int) (result []*model.YmChartMetadatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYmChartMetadatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y ymChartMetadatumDo) Debug() IYmChartMetadatumDo {
	return y.withDO(y.DO.Debug())
}

func (y ymChartMetadatumDo) WithContext(ctx context.Context) IYmChartMetadatumDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y ymChartMetadatumDo) ReadDB() IYmChartMetadatumDo {
	return y.Clauses(dbresolver.Read)
}

func (y ymChartMetadatumDo) WriteDB() IYmChartMetadatumDo {
	return y.Clauses(dbresolver.Write)
}

func (y ymChartMetadatumDo) Session(config *gorm.Session) IYmChartMetadatumDo {
	return y.withDO(y.DO.Session(config))
}

func (y ymChartMetadatumDo) Clauses(conds ...clause.Expression) IYmChartMetadatumDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y ymChartMetadatumDo) Returning(value interface{}, columns ...string) IYmChartMetadatumDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y ymChartMetadatumDo) Not(conds ...gen.Condition) IYmChartMetadatumDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y ymChartMetadatumDo) Or(conds ...gen.Condition) IYmChartMetadatumDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y ymChartMetadatumDo) Select(conds ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y ymChartMetadatumDo) Where(conds ...gen.Condition) IYmChartMetadatumDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y ymChartMetadatumDo) Order(conds ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y ymChartMetadatumDo) Distinct(cols ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y ymChartMetadatumDo) Omit(cols ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y ymChartMetadatumDo) Join(table schema.Tabler, on ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y ymChartMetadatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y ymChartMetadatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y ymChartMetadatumDo) Group(cols ...field.Expr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y ymChartMetadatumDo) Having(conds ...gen.Condition) IYmChartMetadatumDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y ymChartMetadatumDo) Limit(limit int) IYmChartMetadatumDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y ymChartMetadatumDo) Offset(offset int) IYmChartMetadatumDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y ymChartMetadatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYmChartMetadatumDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y ymChartMetadatumDo) Unscoped() IYmChartMetadatumDo {
	return y.withDO(y.DO.Unscoped())
}

func (y ymChartMetadatumDo) Create(values ...*model.YmChartMetadatum) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y ymChartMetadatumDo) CreateInBatches(values []*model.YmChartMetadatum, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y ymChartMetadatumDo) Save(values ...*model.YmChartMetadatum) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y ymChartMetadatumDo) First() (*model.YmChartMetadatum, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmChartMetadatum), nil
	}
}

func (y ymChartMetadatumDo) Take() (*model.YmChartMetadatum, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmChartMetadatum), nil
	}
}

func (y ymChartMetadatumDo) Last() (*model.YmChartMetadatum, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmChartMetadatum), nil
	}
}

func (y ymChartMetadatumDo) Find() ([]*model.YmChartMetadatum, error) {
	result, err := y.DO.Find()
	return result.([]*model.YmChartMetadatum), err
}

func (y ymChartMetadatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmChartMetadatum, err error) {
	buf := make([]*model.YmChartMetadatum, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y ymChartMetadatumDo) FindInBatches(result *[]*model.YmChartMetadatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y ymChartMetadatumDo) Attrs(attrs ...field.AssignExpr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y ymChartMetadatumDo) Assign(attrs ...field.AssignExpr) IYmChartMetadatumDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y ymChartMetadatumDo) Joins(fields ...field.RelationField) IYmChartMetadatumDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y ymChartMetadatumDo) Preload(fields ...field.RelationField) IYmChartMetadatumDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y ymChartMetadatumDo) FirstOrInit() (*model.YmChartMetadatum, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmChartMetadatum), nil
	}
}

func (y ymChartMetadatumDo) FirstOrCreate() (*model.YmChartMetadatum, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmChartMetadatum), nil
	}
}

func (y ymChartMetadatumDo) FindByPage(offset int, limit int) (result []*model.YmChartMetadatum, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y ymChartMetadatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y ymChartMetadatumDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y ymChartMetadatumDo) Delete(models ...*model.YmChartMetadatum) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *ymChartMetadatumDo) withDO(do gen.Dao) *ymChartMetadatumDo {
	y.DO = *do.(*gen.DO)
	return y
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newSmn(db *gorm.DB, opts ...gen.DOOption) smn {
	_smn := smn{}

	_smn.smnDo.UseDB(db, opts...)
	_smn.smnDo.UseModel(&model.Smn{})

	tableName := _smn.smnDo.TableName()
	_smn.ALL = field.NewAsterisk(tableName)
	_smn.ID = field.NewString(tableName, "id")
	_smn.TopicUrn = field.NewString(tableName, "topic_urn")
	_smn.SubscriptionUrn = field.NewString(tableName, "subscription_urn")
	_smn.UserID = field.NewString(tableName, "userId")

	_smn.fillFieldMap()

	return _smn
}

type smn struct {
	smnDo

	ALL             field.Asterisk
	ID              field.String
	TopicUrn        field.String
	SubscriptionUrn field.String
	UserID          field.String

	fieldMap map[string]field.Expr
}

func (s smn) Table(newTableName string) *smn {
	s.smnDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smn) As(alias string) *smn {
	s.smnDo.DO = *(s.smnDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smn) updateTableName(table string) *smn {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.TopicUrn = field.NewString(table, "topic_urn")
	s.SubscriptionUrn = field.NewString(table, "subscription_urn")
	s.UserID = field.NewString(table, "userId")

	s.fillFieldMap()

	return s
}

func (s *smn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smn) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["topic_urn"] = s.TopicUrn
	s.fieldMap["subscription_urn"] = s.SubscriptionUrn
	s.fieldMap["userId"] = s.UserID
}

func (s smn) clone(db *gorm.DB) smn {
	s.smnDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smn) replaceDB(db *gorm.DB) smn {
	s.smnDo.ReplaceDB(db)
	return s
}

type smnDo struct{ gen.DO }

type ISmnDo interface {
	gen.SubQuery
	Debug() ISmnDo
	WithContext(ctx context.Context) ISmnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmnDo
	WriteDB() ISmnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmnDo
	Not(conds ...gen.Condition) ISmnDo
	Or(conds ...gen.Condition) ISmnDo
	Select(conds ...field.Expr) ISmnDo
	Where(conds ...gen.Condition) ISmnDo
	Order(conds ...field.Expr) ISmnDo
	Distinct(cols ...field.Expr) ISmnDo
	Omit(cols ...field.Expr) ISmnDo
	Join(table schema.Tabler, on ...field.Expr) ISmnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmnDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmnDo
	Group(cols ...field.Expr) ISmnDo
	Having(conds ...gen.Condition) ISmnDo
	Limit(limit int) ISmnDo
	Offset(offset int) ISmnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmnDo
	Unscoped() ISmnDo
	Create(values ...*model.Smn) error
	CreateInBatches(values []*model.Smn, batchSize int) error
	Save(values ...*model.Smn) error
	First() (*model.Smn, error)
	Take() (*model.Smn, error)
	Last() (*model.Smn, error)
	Find() ([]*model.Smn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Smn, err error)
	FindInBatches(result *[]*model.Smn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Smn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmnDo
	Assign(attrs ...field.AssignExpr) ISmnDo
	Joins(fields ...field.RelationField) ISmnDo
	Preload(fields ...field.RelationField) ISmnDo
	FirstOrInit() (*model.Smn, error)
	FirstOrCreate() (*model.Smn, error)
	FindByPage(offset int, limit int) (result []*model.Smn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smnDo) Debug() ISmnDo {
	return s.withDO(s.DO.Debug())
}

func (s smnDo) WithContext(ctx context.Context) ISmnDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smnDo) ReadDB() ISmnDo {
	return s.Clauses(dbresolver.Read)
}

func (s smnDo) WriteDB() ISmnDo {
	return s.Clauses(dbresolver.Write)
}

func (s smnDo) Session(config *gorm.Session) ISmnDo {
	return s.withDO(s.DO.Session(config))
}

func (s smnDo) Clauses(conds ...clause.Expression) ISmnDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smnDo) Returning(value interface{}, columns ...string) ISmnDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smnDo) Not(conds ...gen.Condition) ISmnDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smnDo) Or(conds ...gen.Condition) ISmnDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smnDo) Select(conds ...field.Expr) ISmnDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smnDo) Where(conds ...gen.Condition) ISmnDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smnDo) Order(conds ...field.Expr) ISmnDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smnDo) Distinct(cols ...field.Expr) ISmnDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smnDo) Omit(cols ...field.Expr) ISmnDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smnDo) Join(table schema.Tabler, on ...field.Expr) ISmnDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smnDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmnDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smnDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmnDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smnDo) Group(cols ...field.Expr) ISmnDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smnDo) Having(conds ...gen.Condition) ISmnDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smnDo) Limit(limit int) ISmnDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smnDo) Offset(offset int) ISmnDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmnDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smnDo) Unscoped() ISmnDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smnDo) Create(values ...*model.Smn) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smnDo) CreateInBatches(values []*model.Smn, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smnDo) Save(values ...*model.Smn) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smnDo) First() (*model.Smn, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smn), nil
	}
}

func (s smnDo) Take() (*model.Smn, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smn), nil
	}
}

func (s smnDo) Last() (*model.Smn, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smn), nil
	}
}

func (s smnDo) Find() ([]*model.Smn, error) {
	result, err := s.DO.Find()
	return result.([]*model.Smn), err
}

func (s smnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Smn, err error) {
	buf := make([]*model.Smn, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smnDo) FindInBatches(result *[]*model.Smn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smnDo) Attrs(attrs ...field.AssignExpr) ISmnDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smnDo) Assign(attrs ...field.AssignExpr) ISmnDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smnDo) Joins(fields ...field.RelationField) ISmnDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smnDo) Preload(fields ...field.RelationField) ISmnDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smnDo) FirstOrInit() (*model.Smn, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smn), nil
	}
}

func (s smnDo) FirstOrCreate() (*model.Smn, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smn), nil
	}
}

func (s smnDo) FindByPage(offset int, limit int) (result []*model.Smn, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smnDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smnDo) Delete(models ...*model.Smn) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smnDo) withDO(do gen.Dao) *smnDo {
	s.DO = *do.(*gen.DO)
	return s
}

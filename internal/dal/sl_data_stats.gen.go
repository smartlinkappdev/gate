// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newSlDataStat(db *gorm.DB, opts ...gen.DOOption) slDataStat {
	_slDataStat := slDataStat{}

	_slDataStat.slDataStatDo.UseDB(db, opts...)
	_slDataStat.slDataStatDo.UseModel(&model.SlDataStat{})

	tableName := _slDataStat.slDataStatDo.TableName()
	_slDataStat.ALL = field.NewAsterisk(tableName)
	_slDataStat.StatsID = field.NewString(tableName, "stats_id")
	_slDataStat.SlID = field.NewString(tableName, "sl_id")
	_slDataStat.SlName = field.NewString(tableName, "sl_name")
	_slDataStat.CreatedAt = field.NewTime(tableName, "created_at")
	_slDataStat.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slDataStat.Version = field.NewInt32(tableName, "version")
	_slDataStat.CreatedBy = field.NewString(tableName, "created_by")
	_slDataStat.UpdatedBy = field.NewString(tableName, "updated_by")
	_slDataStat.Sessions = field.NewString(tableName, "sessions")
	_slDataStat.TotalSessions = field.NewInt32(tableName, "total_sessions")
	_slDataStat.AndroidDp = field.NewString(tableName, "android_dp")
	_slDataStat.AndroidApp = field.NewString(tableName, "android_app")
	_slDataStat.IosDp = field.NewString(tableName, "ios_dp")
	_slDataStat.IosAppsDp = field.NewString(tableName, "ios_apps_dp")
	_slDataStat.URL = field.NewString(tableName, "url")
	_slDataStat.URLStatusCode = field.NewInt32(tableName, "url_status_code")
	_slDataStat.WebLinkDesk = field.NewString(tableName, "web_link_desk")
	_slDataStat.Comments = field.NewString(tableName, "comments")
	_slDataStat.CustomOg = field.NewBool(tableName, "custom_og")
	_slDataStat.MetaDescription = field.NewString(tableName, "meta_description")
	_slDataStat.MetaTitle = field.NewString(tableName, "meta_title")
	_slDataStat.NeedUtm = field.NewString(tableName, "need_utm")
	_slDataStat.NeedWebAnd = field.NewBool(tableName, "need_web_and")
	_slDataStat.NeedWebIos = field.NewBool(tableName, "need_web_ios")
	_slDataStat.OgImage = field.NewString(tableName, "og_image")
	_slDataStat.Scenario = field.NewString(tableName, "scenario")
	_slDataStat.TpUtmCampaign = field.NewString(tableName, "tp_utm_campaign")
	_slDataStat.TpUtmContent = field.NewString(tableName, "tp_utm_content")
	_slDataStat.TpUtmMedium = field.NewString(tableName, "tp_utm_medium")
	_slDataStat.TpUtmSource = field.NewString(tableName, "tp_utm_source")
	_slDataStat.TpUtmTerm = field.NewString(tableName, "tp_utm_term")
	_slDataStat.UploadedImageID = field.NewString(tableName, "uploaded_image_id")
	_slDataStat.WebLinkAnd = field.NewString(tableName, "web_link_and")
	_slDataStat.WebLinkIos = field.NewString(tableName, "web_link_ios")
	_slDataStat.CustomWebLinkAnd = field.NewBool(tableName, "custom_web_link_and")
	_slDataStat.CustomWebLinkIos = field.NewBool(tableName, "custom_web_link_ios")

	_slDataStat.fillFieldMap()

	return _slDataStat
}

type slDataStat struct {
	slDataStatDo

	ALL              field.Asterisk
	StatsID          field.String
	SlID             field.String
	SlName           field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	Version          field.Int32
	CreatedBy        field.String
	UpdatedBy        field.String
	Sessions         field.String
	TotalSessions    field.Int32
	AndroidDp        field.String
	AndroidApp       field.String
	IosDp            field.String
	IosAppsDp        field.String
	URL              field.String
	URLStatusCode    field.Int32
	WebLinkDesk      field.String
	Comments         field.String
	CustomOg         field.Bool
	MetaDescription  field.String
	MetaTitle        field.String
	NeedUtm          field.String
	NeedWebAnd       field.Bool
	NeedWebIos       field.Bool
	OgImage          field.String
	Scenario         field.String
	TpUtmCampaign    field.String
	TpUtmContent     field.String
	TpUtmMedium      field.String
	TpUtmSource      field.String
	TpUtmTerm        field.String
	UploadedImageID  field.String
	WebLinkAnd       field.String
	WebLinkIos       field.String
	CustomWebLinkAnd field.Bool
	CustomWebLinkIos field.Bool

	fieldMap map[string]field.Expr
}

func (s slDataStat) Table(newTableName string) *slDataStat {
	s.slDataStatDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slDataStat) As(alias string) *slDataStat {
	s.slDataStatDo.DO = *(s.slDataStatDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slDataStat) updateTableName(table string) *slDataStat {
	s.ALL = field.NewAsterisk(table)
	s.StatsID = field.NewString(table, "stats_id")
	s.SlID = field.NewString(table, "sl_id")
	s.SlName = field.NewString(table, "sl_name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Version = field.NewInt32(table, "version")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.Sessions = field.NewString(table, "sessions")
	s.TotalSessions = field.NewInt32(table, "total_sessions")
	s.AndroidDp = field.NewString(table, "android_dp")
	s.AndroidApp = field.NewString(table, "android_app")
	s.IosDp = field.NewString(table, "ios_dp")
	s.IosAppsDp = field.NewString(table, "ios_apps_dp")
	s.URL = field.NewString(table, "url")
	s.URLStatusCode = field.NewInt32(table, "url_status_code")
	s.WebLinkDesk = field.NewString(table, "web_link_desk")
	s.Comments = field.NewString(table, "comments")
	s.CustomOg = field.NewBool(table, "custom_og")
	s.MetaDescription = field.NewString(table, "meta_description")
	s.MetaTitle = field.NewString(table, "meta_title")
	s.NeedUtm = field.NewString(table, "need_utm")
	s.NeedWebAnd = field.NewBool(table, "need_web_and")
	s.NeedWebIos = field.NewBool(table, "need_web_ios")
	s.OgImage = field.NewString(table, "og_image")
	s.Scenario = field.NewString(table, "scenario")
	s.TpUtmCampaign = field.NewString(table, "tp_utm_campaign")
	s.TpUtmContent = field.NewString(table, "tp_utm_content")
	s.TpUtmMedium = field.NewString(table, "tp_utm_medium")
	s.TpUtmSource = field.NewString(table, "tp_utm_source")
	s.TpUtmTerm = field.NewString(table, "tp_utm_term")
	s.UploadedImageID = field.NewString(table, "uploaded_image_id")
	s.WebLinkAnd = field.NewString(table, "web_link_and")
	s.WebLinkIos = field.NewString(table, "web_link_ios")
	s.CustomWebLinkAnd = field.NewBool(table, "custom_web_link_and")
	s.CustomWebLinkIos = field.NewBool(table, "custom_web_link_ios")

	s.fillFieldMap()

	return s
}

func (s *slDataStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slDataStat) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 36)
	s.fieldMap["stats_id"] = s.StatsID
	s.fieldMap["sl_id"] = s.SlID
	s.fieldMap["sl_name"] = s.SlName
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["sessions"] = s.Sessions
	s.fieldMap["total_sessions"] = s.TotalSessions
	s.fieldMap["android_dp"] = s.AndroidDp
	s.fieldMap["android_app"] = s.AndroidApp
	s.fieldMap["ios_dp"] = s.IosDp
	s.fieldMap["ios_apps_dp"] = s.IosAppsDp
	s.fieldMap["url"] = s.URL
	s.fieldMap["url_status_code"] = s.URLStatusCode
	s.fieldMap["web_link_desk"] = s.WebLinkDesk
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["custom_og"] = s.CustomOg
	s.fieldMap["meta_description"] = s.MetaDescription
	s.fieldMap["meta_title"] = s.MetaTitle
	s.fieldMap["need_utm"] = s.NeedUtm
	s.fieldMap["need_web_and"] = s.NeedWebAnd
	s.fieldMap["need_web_ios"] = s.NeedWebIos
	s.fieldMap["og_image"] = s.OgImage
	s.fieldMap["scenario"] = s.Scenario
	s.fieldMap["tp_utm_campaign"] = s.TpUtmCampaign
	s.fieldMap["tp_utm_content"] = s.TpUtmContent
	s.fieldMap["tp_utm_medium"] = s.TpUtmMedium
	s.fieldMap["tp_utm_source"] = s.TpUtmSource
	s.fieldMap["tp_utm_term"] = s.TpUtmTerm
	s.fieldMap["uploaded_image_id"] = s.UploadedImageID
	s.fieldMap["web_link_and"] = s.WebLinkAnd
	s.fieldMap["web_link_ios"] = s.WebLinkIos
	s.fieldMap["custom_web_link_and"] = s.CustomWebLinkAnd
	s.fieldMap["custom_web_link_ios"] = s.CustomWebLinkIos
}

func (s slDataStat) clone(db *gorm.DB) slDataStat {
	s.slDataStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slDataStat) replaceDB(db *gorm.DB) slDataStat {
	s.slDataStatDo.ReplaceDB(db)
	return s
}

type slDataStatDo struct{ gen.DO }

type ISlDataStatDo interface {
	gen.SubQuery
	Debug() ISlDataStatDo
	WithContext(ctx context.Context) ISlDataStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlDataStatDo
	WriteDB() ISlDataStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlDataStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlDataStatDo
	Not(conds ...gen.Condition) ISlDataStatDo
	Or(conds ...gen.Condition) ISlDataStatDo
	Select(conds ...field.Expr) ISlDataStatDo
	Where(conds ...gen.Condition) ISlDataStatDo
	Order(conds ...field.Expr) ISlDataStatDo
	Distinct(cols ...field.Expr) ISlDataStatDo
	Omit(cols ...field.Expr) ISlDataStatDo
	Join(table schema.Tabler, on ...field.Expr) ISlDataStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlDataStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlDataStatDo
	Group(cols ...field.Expr) ISlDataStatDo
	Having(conds ...gen.Condition) ISlDataStatDo
	Limit(limit int) ISlDataStatDo
	Offset(offset int) ISlDataStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlDataStatDo
	Unscoped() ISlDataStatDo
	Create(values ...*model.SlDataStat) error
	CreateInBatches(values []*model.SlDataStat, batchSize int) error
	Save(values ...*model.SlDataStat) error
	First() (*model.SlDataStat, error)
	Take() (*model.SlDataStat, error)
	Last() (*model.SlDataStat, error)
	Find() ([]*model.SlDataStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SlDataStat, err error)
	FindInBatches(result *[]*model.SlDataStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SlDataStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlDataStatDo
	Assign(attrs ...field.AssignExpr) ISlDataStatDo
	Joins(fields ...field.RelationField) ISlDataStatDo
	Preload(fields ...field.RelationField) ISlDataStatDo
	FirstOrInit() (*model.SlDataStat, error)
	FirstOrCreate() (*model.SlDataStat, error)
	FindByPage(offset int, limit int) (result []*model.SlDataStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlDataStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slDataStatDo) Debug() ISlDataStatDo {
	return s.withDO(s.DO.Debug())
}

func (s slDataStatDo) WithContext(ctx context.Context) ISlDataStatDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slDataStatDo) ReadDB() ISlDataStatDo {
	return s.Clauses(dbresolver.Read)
}

func (s slDataStatDo) WriteDB() ISlDataStatDo {
	return s.Clauses(dbresolver.Write)
}

func (s slDataStatDo) Session(config *gorm.Session) ISlDataStatDo {
	return s.withDO(s.DO.Session(config))
}

func (s slDataStatDo) Clauses(conds ...clause.Expression) ISlDataStatDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slDataStatDo) Returning(value interface{}, columns ...string) ISlDataStatDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slDataStatDo) Not(conds ...gen.Condition) ISlDataStatDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slDataStatDo) Or(conds ...gen.Condition) ISlDataStatDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slDataStatDo) Select(conds ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slDataStatDo) Where(conds ...gen.Condition) ISlDataStatDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slDataStatDo) Order(conds ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slDataStatDo) Distinct(cols ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slDataStatDo) Omit(cols ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slDataStatDo) Join(table schema.Tabler, on ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slDataStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slDataStatDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slDataStatDo) Group(cols ...field.Expr) ISlDataStatDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slDataStatDo) Having(conds ...gen.Condition) ISlDataStatDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slDataStatDo) Limit(limit int) ISlDataStatDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slDataStatDo) Offset(offset int) ISlDataStatDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slDataStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlDataStatDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slDataStatDo) Unscoped() ISlDataStatDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slDataStatDo) Create(values ...*model.SlDataStat) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slDataStatDo) CreateInBatches(values []*model.SlDataStat, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slDataStatDo) Save(values ...*model.SlDataStat) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slDataStatDo) First() (*model.SlDataStat, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDataStat), nil
	}
}

func (s slDataStatDo) Take() (*model.SlDataStat, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDataStat), nil
	}
}

func (s slDataStatDo) Last() (*model.SlDataStat, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDataStat), nil
	}
}

func (s slDataStatDo) Find() ([]*model.SlDataStat, error) {
	result, err := s.DO.Find()
	return result.([]*model.SlDataStat), err
}

func (s slDataStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SlDataStat, err error) {
	buf := make([]*model.SlDataStat, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slDataStatDo) FindInBatches(result *[]*model.SlDataStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slDataStatDo) Attrs(attrs ...field.AssignExpr) ISlDataStatDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slDataStatDo) Assign(attrs ...field.AssignExpr) ISlDataStatDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slDataStatDo) Joins(fields ...field.RelationField) ISlDataStatDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slDataStatDo) Preload(fields ...field.RelationField) ISlDataStatDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slDataStatDo) FirstOrInit() (*model.SlDataStat, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDataStat), nil
	}
}

func (s slDataStatDo) FirstOrCreate() (*model.SlDataStat, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDataStat), nil
	}
}

func (s slDataStatDo) FindByPage(offset int, limit int) (result []*model.SlDataStat, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slDataStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slDataStatDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slDataStatDo) Delete(models ...*model.SlDataStat) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slDataStatDo) withDO(do gen.Dao) *slDataStatDo {
	s.DO = *do.(*gen.DO)
	return s
}

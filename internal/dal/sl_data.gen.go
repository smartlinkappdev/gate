// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newSlDatum(db *gorm.DB, opts ...gen.DOOption) slDatum {
	_slDatum := slDatum{}

	_slDatum.slDatumDo.UseDB(db, opts...)
	_slDatum.slDatumDo.UseModel(&model.SlDatum{})

	tableName := _slDatum.slDatumDo.TableName()
	_slDatum.ALL = field.NewAsterisk(tableName)
	_slDatum.SlID = field.NewString(tableName, "sl_id")
	_slDatum.SlName = field.NewString(tableName, "sl_name")
	_slDatum.NeedUtm = field.NewString(tableName, "need_utm")
	_slDatum.TpUtmSource = field.NewString(tableName, "tp_utm_source")
	_slDatum.TpUtmMedium = field.NewString(tableName, "tp_utm_medium")
	_slDatum.TpUtmCampaign = field.NewString(tableName, "tp_utm_campaign")
	_slDatum.TpUtmContent = field.NewString(tableName, "tp_utm_content")
	_slDatum.TpUtmTerm = field.NewString(tableName, "tp_utm_term")
	_slDatum.AndroidDp = field.NewString(tableName, "android_dp")
	_slDatum.NeedWebAnd = field.NewBool(tableName, "need_web_and")
	_slDatum.CustomWebLinkAnd = field.NewBool(tableName, "custom_web_link_and")
	_slDatum.WebLinkAnd = field.NewString(tableName, "web_link_and")
	_slDatum.StoreLinkAnd = field.NewString(tableName, "store_link_and")
	_slDatum.AndroidApp = field.NewString(tableName, "android_app")
	_slDatum.IosDp = field.NewString(tableName, "ios_dp")
	_slDatum.MultiAppIos = field.NewBool(tableName, "multi_app_ios")
	_slDatum.NeedWebIos = field.NewBool(tableName, "need_web_ios")
	_slDatum.CustomWebLinkIos = field.NewBool(tableName, "custom_web_link_ios")
	_slDatum.WebLinkIos = field.NewString(tableName, "web_link_ios")
	_slDatum.StoreLinkIos = field.NewString(tableName, "store_link_ios")
	_slDatum.IosAppsDp = field.NewString(tableName, "ios_apps_dp")
	_slDatum.WebLinkDesk = field.NewString(tableName, "web_link_desk")
	_slDatum.CustomParams = field.NewBool(tableName, "custom_params")
	_slDatum.Pfa = field.NewBool(tableName, "pfa")
	_slDatum.PfaName = field.NewString(tableName, "pfa_name")
	_slDatum.Comments = field.NewString(tableName, "comments")
	_slDatum.CreatedAt = field.NewTime(tableName, "created_at")
	_slDatum.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slDatum.CreatedBy = field.NewString(tableName, "created_by")
	_slDatum.UpdatedBy = field.NewString(tableName, "updated_by")
	_slDatum.Version = field.NewInt32(tableName, "version")
	_slDatum.ParamsURL = field.NewString(tableName, "params_url")
	_slDatum.ParamsWeb = field.NewString(tableName, "params_web")
	_slDatum.ParamsIos = field.NewString(tableName, "params_ios")
	_slDatum.ParamsAnd = field.NewString(tableName, "params_and")
	_slDatum.OgImage = field.NewString(tableName, "og_image")
	_slDatum.MetaTitle = field.NewString(tableName, "meta_title")
	_slDatum.MetaDescription = field.NewString(tableName, "meta_description")
	_slDatum.CustomOg = field.NewBool(tableName, "custom_og")
	_slDatum.Scenario = field.NewString(tableName, "scenario")
	_slDatum.UploadedImageID = field.NewString(tableName, "uploaded_image_id")

	_slDatum.fillFieldMap()

	return _slDatum
}

type slDatum struct {
	slDatumDo

	ALL              field.Asterisk
	SlID             field.String
	SlName           field.String
	NeedUtm          field.String
	TpUtmSource      field.String
	TpUtmMedium      field.String
	TpUtmCampaign    field.String
	TpUtmContent     field.String
	TpUtmTerm        field.String
	AndroidDp        field.String
	NeedWebAnd       field.Bool
	CustomWebLinkAnd field.Bool
	WebLinkAnd       field.String
	StoreLinkAnd     field.String
	AndroidApp       field.String
	IosDp            field.String
	MultiAppIos      field.Bool
	NeedWebIos       field.Bool
	CustomWebLinkIos field.Bool
	WebLinkIos       field.String
	StoreLinkIos     field.String
	IosAppsDp        field.String
	WebLinkDesk      field.String
	CustomParams     field.Bool
	Pfa              field.Bool
	PfaName          field.String
	Comments         field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	CreatedBy        field.String
	UpdatedBy        field.String
	Version          field.Int32
	ParamsURL        field.String
	ParamsWeb        field.String
	ParamsIos        field.String
	ParamsAnd        field.String
	OgImage          field.String
	MetaTitle        field.String
	MetaDescription  field.String
	CustomOg         field.Bool
	Scenario         field.String
	UploadedImageID  field.String

	fieldMap map[string]field.Expr
}

func (s slDatum) Table(newTableName string) *slDatum {
	s.slDatumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slDatum) As(alias string) *slDatum {
	s.slDatumDo.DO = *(s.slDatumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slDatum) updateTableName(table string) *slDatum {
	s.ALL = field.NewAsterisk(table)
	s.SlID = field.NewString(table, "sl_id")
	s.SlName = field.NewString(table, "sl_name")
	s.NeedUtm = field.NewString(table, "need_utm")
	s.TpUtmSource = field.NewString(table, "tp_utm_source")
	s.TpUtmMedium = field.NewString(table, "tp_utm_medium")
	s.TpUtmCampaign = field.NewString(table, "tp_utm_campaign")
	s.TpUtmContent = field.NewString(table, "tp_utm_content")
	s.TpUtmTerm = field.NewString(table, "tp_utm_term")
	s.AndroidDp = field.NewString(table, "android_dp")
	s.NeedWebAnd = field.NewBool(table, "need_web_and")
	s.CustomWebLinkAnd = field.NewBool(table, "custom_web_link_and")
	s.WebLinkAnd = field.NewString(table, "web_link_and")
	s.StoreLinkAnd = field.NewString(table, "store_link_and")
	s.AndroidApp = field.NewString(table, "android_app")
	s.IosDp = field.NewString(table, "ios_dp")
	s.MultiAppIos = field.NewBool(table, "multi_app_ios")
	s.NeedWebIos = field.NewBool(table, "need_web_ios")
	s.CustomWebLinkIos = field.NewBool(table, "custom_web_link_ios")
	s.WebLinkIos = field.NewString(table, "web_link_ios")
	s.StoreLinkIos = field.NewString(table, "store_link_ios")
	s.IosAppsDp = field.NewString(table, "ios_apps_dp")
	s.WebLinkDesk = field.NewString(table, "web_link_desk")
	s.CustomParams = field.NewBool(table, "custom_params")
	s.Pfa = field.NewBool(table, "pfa")
	s.PfaName = field.NewString(table, "pfa_name")
	s.Comments = field.NewString(table, "comments")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.CreatedBy = field.NewString(table, "created_by")
	s.UpdatedBy = field.NewString(table, "updated_by")
	s.Version = field.NewInt32(table, "version")
	s.ParamsURL = field.NewString(table, "params_url")
	s.ParamsWeb = field.NewString(table, "params_web")
	s.ParamsIos = field.NewString(table, "params_ios")
	s.ParamsAnd = field.NewString(table, "params_and")
	s.OgImage = field.NewString(table, "og_image")
	s.MetaTitle = field.NewString(table, "meta_title")
	s.MetaDescription = field.NewString(table, "meta_description")
	s.CustomOg = field.NewBool(table, "custom_og")
	s.Scenario = field.NewString(table, "scenario")
	s.UploadedImageID = field.NewString(table, "uploaded_image_id")

	s.fillFieldMap()

	return s
}

func (s *slDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slDatum) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 41)
	s.fieldMap["sl_id"] = s.SlID
	s.fieldMap["sl_name"] = s.SlName
	s.fieldMap["need_utm"] = s.NeedUtm
	s.fieldMap["tp_utm_source"] = s.TpUtmSource
	s.fieldMap["tp_utm_medium"] = s.TpUtmMedium
	s.fieldMap["tp_utm_campaign"] = s.TpUtmCampaign
	s.fieldMap["tp_utm_content"] = s.TpUtmContent
	s.fieldMap["tp_utm_term"] = s.TpUtmTerm
	s.fieldMap["android_dp"] = s.AndroidDp
	s.fieldMap["need_web_and"] = s.NeedWebAnd
	s.fieldMap["custom_web_link_and"] = s.CustomWebLinkAnd
	s.fieldMap["web_link_and"] = s.WebLinkAnd
	s.fieldMap["store_link_and"] = s.StoreLinkAnd
	s.fieldMap["android_app"] = s.AndroidApp
	s.fieldMap["ios_dp"] = s.IosDp
	s.fieldMap["multi_app_ios"] = s.MultiAppIos
	s.fieldMap["need_web_ios"] = s.NeedWebIos
	s.fieldMap["custom_web_link_ios"] = s.CustomWebLinkIos
	s.fieldMap["web_link_ios"] = s.WebLinkIos
	s.fieldMap["store_link_ios"] = s.StoreLinkIos
	s.fieldMap["ios_apps_dp"] = s.IosAppsDp
	s.fieldMap["web_link_desk"] = s.WebLinkDesk
	s.fieldMap["custom_params"] = s.CustomParams
	s.fieldMap["pfa"] = s.Pfa
	s.fieldMap["pfa_name"] = s.PfaName
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["version"] = s.Version
	s.fieldMap["params_url"] = s.ParamsURL
	s.fieldMap["params_web"] = s.ParamsWeb
	s.fieldMap["params_ios"] = s.ParamsIos
	s.fieldMap["params_and"] = s.ParamsAnd
	s.fieldMap["og_image"] = s.OgImage
	s.fieldMap["meta_title"] = s.MetaTitle
	s.fieldMap["meta_description"] = s.MetaDescription
	s.fieldMap["custom_og"] = s.CustomOg
	s.fieldMap["scenario"] = s.Scenario
	s.fieldMap["uploaded_image_id"] = s.UploadedImageID
}

func (s slDatum) clone(db *gorm.DB) slDatum {
	s.slDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slDatum) replaceDB(db *gorm.DB) slDatum {
	s.slDatumDo.ReplaceDB(db)
	return s
}

type slDatumDo struct{ gen.DO }

type ISlDatumDo interface {
	gen.SubQuery
	Debug() ISlDatumDo
	WithContext(ctx context.Context) ISlDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlDatumDo
	WriteDB() ISlDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlDatumDo
	Not(conds ...gen.Condition) ISlDatumDo
	Or(conds ...gen.Condition) ISlDatumDo
	Select(conds ...field.Expr) ISlDatumDo
	Where(conds ...gen.Condition) ISlDatumDo
	Order(conds ...field.Expr) ISlDatumDo
	Distinct(cols ...field.Expr) ISlDatumDo
	Omit(cols ...field.Expr) ISlDatumDo
	Join(table schema.Tabler, on ...field.Expr) ISlDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlDatumDo
	Group(cols ...field.Expr) ISlDatumDo
	Having(conds ...gen.Condition) ISlDatumDo
	Limit(limit int) ISlDatumDo
	Offset(offset int) ISlDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlDatumDo
	Unscoped() ISlDatumDo
	Create(values ...*model.SlDatum) error
	CreateInBatches(values []*model.SlDatum, batchSize int) error
	Save(values ...*model.SlDatum) error
	First() (*model.SlDatum, error)
	Take() (*model.SlDatum, error)
	Last() (*model.SlDatum, error)
	Find() ([]*model.SlDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SlDatum, err error)
	FindInBatches(result *[]*model.SlDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SlDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlDatumDo
	Assign(attrs ...field.AssignExpr) ISlDatumDo
	Joins(fields ...field.RelationField) ISlDatumDo
	Preload(fields ...field.RelationField) ISlDatumDo
	FirstOrInit() (*model.SlDatum, error)
	FirstOrCreate() (*model.SlDatum, error)
	FindByPage(offset int, limit int) (result []*model.SlDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slDatumDo) Debug() ISlDatumDo {
	return s.withDO(s.DO.Debug())
}

func (s slDatumDo) WithContext(ctx context.Context) ISlDatumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slDatumDo) ReadDB() ISlDatumDo {
	return s.Clauses(dbresolver.Read)
}

func (s slDatumDo) WriteDB() ISlDatumDo {
	return s.Clauses(dbresolver.Write)
}

func (s slDatumDo) Session(config *gorm.Session) ISlDatumDo {
	return s.withDO(s.DO.Session(config))
}

func (s slDatumDo) Clauses(conds ...clause.Expression) ISlDatumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slDatumDo) Returning(value interface{}, columns ...string) ISlDatumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slDatumDo) Not(conds ...gen.Condition) ISlDatumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slDatumDo) Or(conds ...gen.Condition) ISlDatumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slDatumDo) Select(conds ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slDatumDo) Where(conds ...gen.Condition) ISlDatumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slDatumDo) Order(conds ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slDatumDo) Distinct(cols ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slDatumDo) Omit(cols ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slDatumDo) Join(table schema.Tabler, on ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slDatumDo) Group(cols ...field.Expr) ISlDatumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slDatumDo) Having(conds ...gen.Condition) ISlDatumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slDatumDo) Limit(limit int) ISlDatumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slDatumDo) Offset(offset int) ISlDatumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlDatumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slDatumDo) Unscoped() ISlDatumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slDatumDo) Create(values ...*model.SlDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slDatumDo) CreateInBatches(values []*model.SlDatum, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slDatumDo) Save(values ...*model.SlDatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slDatumDo) First() (*model.SlDatum, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDatum), nil
	}
}

func (s slDatumDo) Take() (*model.SlDatum, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDatum), nil
	}
}

func (s slDatumDo) Last() (*model.SlDatum, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDatum), nil
	}
}

func (s slDatumDo) Find() ([]*model.SlDatum, error) {
	result, err := s.DO.Find()
	return result.([]*model.SlDatum), err
}

func (s slDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SlDatum, err error) {
	buf := make([]*model.SlDatum, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slDatumDo) FindInBatches(result *[]*model.SlDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slDatumDo) Attrs(attrs ...field.AssignExpr) ISlDatumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slDatumDo) Assign(attrs ...field.AssignExpr) ISlDatumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slDatumDo) Joins(fields ...field.RelationField) ISlDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slDatumDo) Preload(fields ...field.RelationField) ISlDatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slDatumDo) FirstOrInit() (*model.SlDatum, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDatum), nil
	}
}

func (s slDatumDo) FirstOrCreate() (*model.SlDatum, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlDatum), nil
	}
}

func (s slDatumDo) FindByPage(offset int, limit int) (result []*model.SlDatum, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slDatumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slDatumDo) Delete(models ...*model.SlDatum) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slDatumDo) withDO(do gen.Dao) *slDatumDo {
	s.DO = *do.(*gen.DO)
	return s
}

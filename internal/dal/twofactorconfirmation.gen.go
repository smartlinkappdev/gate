// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newTwoFactorConfirmation(db *gorm.DB, opts ...gen.DOOption) twoFactorConfirmation {
	_twoFactorConfirmation := twoFactorConfirmation{}

	_twoFactorConfirmation.twoFactorConfirmationDo.UseDB(db, opts...)
	_twoFactorConfirmation.twoFactorConfirmationDo.UseModel(&model.TwoFactorConfirmation{})

	tableName := _twoFactorConfirmation.twoFactorConfirmationDo.TableName()
	_twoFactorConfirmation.ALL = field.NewAsterisk(tableName)
	_twoFactorConfirmation.ID = field.NewString(tableName, "id")
	_twoFactorConfirmation.UserID = field.NewString(tableName, "userId")

	_twoFactorConfirmation.fillFieldMap()

	return _twoFactorConfirmation
}

type twoFactorConfirmation struct {
	twoFactorConfirmationDo

	ALL    field.Asterisk
	ID     field.String
	UserID field.String

	fieldMap map[string]field.Expr
}

func (t twoFactorConfirmation) Table(newTableName string) *twoFactorConfirmation {
	t.twoFactorConfirmationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t twoFactorConfirmation) As(alias string) *twoFactorConfirmation {
	t.twoFactorConfirmationDo.DO = *(t.twoFactorConfirmationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *twoFactorConfirmation) updateTableName(table string) *twoFactorConfirmation {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.UserID = field.NewString(table, "userId")

	t.fillFieldMap()

	return t
}

func (t *twoFactorConfirmation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *twoFactorConfirmation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["id"] = t.ID
	t.fieldMap["userId"] = t.UserID
}

func (t twoFactorConfirmation) clone(db *gorm.DB) twoFactorConfirmation {
	t.twoFactorConfirmationDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t twoFactorConfirmation) replaceDB(db *gorm.DB) twoFactorConfirmation {
	t.twoFactorConfirmationDo.ReplaceDB(db)
	return t
}

type twoFactorConfirmationDo struct{ gen.DO }

type ITwoFactorConfirmationDo interface {
	gen.SubQuery
	Debug() ITwoFactorConfirmationDo
	WithContext(ctx context.Context) ITwoFactorConfirmationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITwoFactorConfirmationDo
	WriteDB() ITwoFactorConfirmationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITwoFactorConfirmationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITwoFactorConfirmationDo
	Not(conds ...gen.Condition) ITwoFactorConfirmationDo
	Or(conds ...gen.Condition) ITwoFactorConfirmationDo
	Select(conds ...field.Expr) ITwoFactorConfirmationDo
	Where(conds ...gen.Condition) ITwoFactorConfirmationDo
	Order(conds ...field.Expr) ITwoFactorConfirmationDo
	Distinct(cols ...field.Expr) ITwoFactorConfirmationDo
	Omit(cols ...field.Expr) ITwoFactorConfirmationDo
	Join(table schema.Tabler, on ...field.Expr) ITwoFactorConfirmationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITwoFactorConfirmationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITwoFactorConfirmationDo
	Group(cols ...field.Expr) ITwoFactorConfirmationDo
	Having(conds ...gen.Condition) ITwoFactorConfirmationDo
	Limit(limit int) ITwoFactorConfirmationDo
	Offset(offset int) ITwoFactorConfirmationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITwoFactorConfirmationDo
	Unscoped() ITwoFactorConfirmationDo
	Create(values ...*model.TwoFactorConfirmation) error
	CreateInBatches(values []*model.TwoFactorConfirmation, batchSize int) error
	Save(values ...*model.TwoFactorConfirmation) error
	First() (*model.TwoFactorConfirmation, error)
	Take() (*model.TwoFactorConfirmation, error)
	Last() (*model.TwoFactorConfirmation, error)
	Find() ([]*model.TwoFactorConfirmation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TwoFactorConfirmation, err error)
	FindInBatches(result *[]*model.TwoFactorConfirmation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TwoFactorConfirmation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITwoFactorConfirmationDo
	Assign(attrs ...field.AssignExpr) ITwoFactorConfirmationDo
	Joins(fields ...field.RelationField) ITwoFactorConfirmationDo
	Preload(fields ...field.RelationField) ITwoFactorConfirmationDo
	FirstOrInit() (*model.TwoFactorConfirmation, error)
	FirstOrCreate() (*model.TwoFactorConfirmation, error)
	FindByPage(offset int, limit int) (result []*model.TwoFactorConfirmation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITwoFactorConfirmationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t twoFactorConfirmationDo) Debug() ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Debug())
}

func (t twoFactorConfirmationDo) WithContext(ctx context.Context) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t twoFactorConfirmationDo) ReadDB() ITwoFactorConfirmationDo {
	return t.Clauses(dbresolver.Read)
}

func (t twoFactorConfirmationDo) WriteDB() ITwoFactorConfirmationDo {
	return t.Clauses(dbresolver.Write)
}

func (t twoFactorConfirmationDo) Session(config *gorm.Session) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Session(config))
}

func (t twoFactorConfirmationDo) Clauses(conds ...clause.Expression) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t twoFactorConfirmationDo) Returning(value interface{}, columns ...string) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t twoFactorConfirmationDo) Not(conds ...gen.Condition) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t twoFactorConfirmationDo) Or(conds ...gen.Condition) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t twoFactorConfirmationDo) Select(conds ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t twoFactorConfirmationDo) Where(conds ...gen.Condition) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t twoFactorConfirmationDo) Order(conds ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t twoFactorConfirmationDo) Distinct(cols ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t twoFactorConfirmationDo) Omit(cols ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t twoFactorConfirmationDo) Join(table schema.Tabler, on ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t twoFactorConfirmationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t twoFactorConfirmationDo) RightJoin(table schema.Tabler, on ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t twoFactorConfirmationDo) Group(cols ...field.Expr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t twoFactorConfirmationDo) Having(conds ...gen.Condition) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t twoFactorConfirmationDo) Limit(limit int) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t twoFactorConfirmationDo) Offset(offset int) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t twoFactorConfirmationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t twoFactorConfirmationDo) Unscoped() ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t twoFactorConfirmationDo) Create(values ...*model.TwoFactorConfirmation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t twoFactorConfirmationDo) CreateInBatches(values []*model.TwoFactorConfirmation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t twoFactorConfirmationDo) Save(values ...*model.TwoFactorConfirmation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t twoFactorConfirmationDo) First() (*model.TwoFactorConfirmation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorConfirmation), nil
	}
}

func (t twoFactorConfirmationDo) Take() (*model.TwoFactorConfirmation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorConfirmation), nil
	}
}

func (t twoFactorConfirmationDo) Last() (*model.TwoFactorConfirmation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorConfirmation), nil
	}
}

func (t twoFactorConfirmationDo) Find() ([]*model.TwoFactorConfirmation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TwoFactorConfirmation), err
}

func (t twoFactorConfirmationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TwoFactorConfirmation, err error) {
	buf := make([]*model.TwoFactorConfirmation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t twoFactorConfirmationDo) FindInBatches(result *[]*model.TwoFactorConfirmation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t twoFactorConfirmationDo) Attrs(attrs ...field.AssignExpr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t twoFactorConfirmationDo) Assign(attrs ...field.AssignExpr) ITwoFactorConfirmationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t twoFactorConfirmationDo) Joins(fields ...field.RelationField) ITwoFactorConfirmationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t twoFactorConfirmationDo) Preload(fields ...field.RelationField) ITwoFactorConfirmationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t twoFactorConfirmationDo) FirstOrInit() (*model.TwoFactorConfirmation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorConfirmation), nil
	}
}

func (t twoFactorConfirmationDo) FirstOrCreate() (*model.TwoFactorConfirmation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorConfirmation), nil
	}
}

func (t twoFactorConfirmationDo) FindByPage(offset int, limit int) (result []*model.TwoFactorConfirmation, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t twoFactorConfirmationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t twoFactorConfirmationDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t twoFactorConfirmationDo) Delete(models ...*model.TwoFactorConfirmation) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *twoFactorConfirmationDo) withDO(do gen.Dao) *twoFactorConfirmationDo {
	t.DO = *do.(*gen.DO)
	return t
}

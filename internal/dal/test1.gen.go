// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newTest1(db *gorm.DB, opts ...gen.DOOption) test1 {
	_test1 := test1{}

	_test1.test1Do.UseDB(db, opts...)
	_test1.test1Do.UseModel(&model.Test1{})

	tableName := _test1.test1Do.TableName()
	_test1.ALL = field.NewAsterisk(tableName)
	_test1.Date = field.NewString(tableName, "date")
	_test1.Os = field.NewString(tableName, "os")
	_test1.URL = field.NewString(tableName, "url")
	_test1.Users = field.NewInt32(tableName, "users")
	_test1.ID = field.NewInt32(tableName, "id")

	_test1.fillFieldMap()

	return _test1
}

type test1 struct {
	test1Do

	ALL   field.Asterisk
	Date  field.String
	Os    field.String
	URL   field.String
	Users field.Int32
	ID    field.Int32

	fieldMap map[string]field.Expr
}

func (t test1) Table(newTableName string) *test1 {
	t.test1Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t test1) As(alias string) *test1 {
	t.test1Do.DO = *(t.test1Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *test1) updateTableName(table string) *test1 {
	t.ALL = field.NewAsterisk(table)
	t.Date = field.NewString(table, "date")
	t.Os = field.NewString(table, "os")
	t.URL = field.NewString(table, "url")
	t.Users = field.NewInt32(table, "users")
	t.ID = field.NewInt32(table, "id")

	t.fillFieldMap()

	return t
}

func (t *test1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *test1) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["date"] = t.Date
	t.fieldMap["os"] = t.Os
	t.fieldMap["url"] = t.URL
	t.fieldMap["users"] = t.Users
	t.fieldMap["id"] = t.ID
}

func (t test1) clone(db *gorm.DB) test1 {
	t.test1Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t test1) replaceDB(db *gorm.DB) test1 {
	t.test1Do.ReplaceDB(db)
	return t
}

type test1Do struct{ gen.DO }

type ITest1Do interface {
	gen.SubQuery
	Debug() ITest1Do
	WithContext(ctx context.Context) ITest1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITest1Do
	WriteDB() ITest1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITest1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITest1Do
	Not(conds ...gen.Condition) ITest1Do
	Or(conds ...gen.Condition) ITest1Do
	Select(conds ...field.Expr) ITest1Do
	Where(conds ...gen.Condition) ITest1Do
	Order(conds ...field.Expr) ITest1Do
	Distinct(cols ...field.Expr) ITest1Do
	Omit(cols ...field.Expr) ITest1Do
	Join(table schema.Tabler, on ...field.Expr) ITest1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITest1Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITest1Do
	Group(cols ...field.Expr) ITest1Do
	Having(conds ...gen.Condition) ITest1Do
	Limit(limit int) ITest1Do
	Offset(offset int) ITest1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITest1Do
	Unscoped() ITest1Do
	Create(values ...*model.Test1) error
	CreateInBatches(values []*model.Test1, batchSize int) error
	Save(values ...*model.Test1) error
	First() (*model.Test1, error)
	Take() (*model.Test1, error)
	Last() (*model.Test1, error)
	Find() ([]*model.Test1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Test1, err error)
	FindInBatches(result *[]*model.Test1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Test1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITest1Do
	Assign(attrs ...field.AssignExpr) ITest1Do
	Joins(fields ...field.RelationField) ITest1Do
	Preload(fields ...field.RelationField) ITest1Do
	FirstOrInit() (*model.Test1, error)
	FirstOrCreate() (*model.Test1, error)
	FindByPage(offset int, limit int) (result []*model.Test1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITest1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t test1Do) Debug() ITest1Do {
	return t.withDO(t.DO.Debug())
}

func (t test1Do) WithContext(ctx context.Context) ITest1Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t test1Do) ReadDB() ITest1Do {
	return t.Clauses(dbresolver.Read)
}

func (t test1Do) WriteDB() ITest1Do {
	return t.Clauses(dbresolver.Write)
}

func (t test1Do) Session(config *gorm.Session) ITest1Do {
	return t.withDO(t.DO.Session(config))
}

func (t test1Do) Clauses(conds ...clause.Expression) ITest1Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t test1Do) Returning(value interface{}, columns ...string) ITest1Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t test1Do) Not(conds ...gen.Condition) ITest1Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t test1Do) Or(conds ...gen.Condition) ITest1Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t test1Do) Select(conds ...field.Expr) ITest1Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t test1Do) Where(conds ...gen.Condition) ITest1Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t test1Do) Order(conds ...field.Expr) ITest1Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t test1Do) Distinct(cols ...field.Expr) ITest1Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t test1Do) Omit(cols ...field.Expr) ITest1Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t test1Do) Join(table schema.Tabler, on ...field.Expr) ITest1Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t test1Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITest1Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t test1Do) RightJoin(table schema.Tabler, on ...field.Expr) ITest1Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t test1Do) Group(cols ...field.Expr) ITest1Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t test1Do) Having(conds ...gen.Condition) ITest1Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t test1Do) Limit(limit int) ITest1Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t test1Do) Offset(offset int) ITest1Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t test1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITest1Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t test1Do) Unscoped() ITest1Do {
	return t.withDO(t.DO.Unscoped())
}

func (t test1Do) Create(values ...*model.Test1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t test1Do) CreateInBatches(values []*model.Test1, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t test1Do) Save(values ...*model.Test1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t test1Do) First() (*model.Test1, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test1), nil
	}
}

func (t test1Do) Take() (*model.Test1, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test1), nil
	}
}

func (t test1Do) Last() (*model.Test1, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test1), nil
	}
}

func (t test1Do) Find() ([]*model.Test1, error) {
	result, err := t.DO.Find()
	return result.([]*model.Test1), err
}

func (t test1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Test1, err error) {
	buf := make([]*model.Test1, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t test1Do) FindInBatches(result *[]*model.Test1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t test1Do) Attrs(attrs ...field.AssignExpr) ITest1Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t test1Do) Assign(attrs ...field.AssignExpr) ITest1Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t test1Do) Joins(fields ...field.RelationField) ITest1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t test1Do) Preload(fields ...field.RelationField) ITest1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t test1Do) FirstOrInit() (*model.Test1, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test1), nil
	}
}

func (t test1Do) FirstOrCreate() (*model.Test1, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test1), nil
	}
}

func (t test1Do) FindByPage(offset int, limit int) (result []*model.Test1, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t test1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t test1Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t test1Do) Delete(models ...*model.Test1) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *test1Do) withDO(do gen.Dao) *test1Do {
	t.DO = *do.(*gen.DO)
	return t
}

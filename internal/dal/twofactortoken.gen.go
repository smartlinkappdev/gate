// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newTwoFactorToken(db *gorm.DB, opts ...gen.DOOption) twoFactorToken {
	_twoFactorToken := twoFactorToken{}

	_twoFactorToken.twoFactorTokenDo.UseDB(db, opts...)
	_twoFactorToken.twoFactorTokenDo.UseModel(&model.TwoFactorToken{})

	tableName := _twoFactorToken.twoFactorTokenDo.TableName()
	_twoFactorToken.ALL = field.NewAsterisk(tableName)
	_twoFactorToken.ID = field.NewString(tableName, "id")
	_twoFactorToken.Email = field.NewString(tableName, "email")
	_twoFactorToken.Token = field.NewString(tableName, "token")
	_twoFactorToken.Expires = field.NewTime(tableName, "expires")

	_twoFactorToken.fillFieldMap()

	return _twoFactorToken
}

type twoFactorToken struct {
	twoFactorTokenDo

	ALL     field.Asterisk
	ID      field.String
	Email   field.String
	Token   field.String
	Expires field.Time

	fieldMap map[string]field.Expr
}

func (t twoFactorToken) Table(newTableName string) *twoFactorToken {
	t.twoFactorTokenDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t twoFactorToken) As(alias string) *twoFactorToken {
	t.twoFactorTokenDo.DO = *(t.twoFactorTokenDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *twoFactorToken) updateTableName(table string) *twoFactorToken {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.Email = field.NewString(table, "email")
	t.Token = field.NewString(table, "token")
	t.Expires = field.NewTime(table, "expires")

	t.fillFieldMap()

	return t
}

func (t *twoFactorToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *twoFactorToken) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["email"] = t.Email
	t.fieldMap["token"] = t.Token
	t.fieldMap["expires"] = t.Expires
}

func (t twoFactorToken) clone(db *gorm.DB) twoFactorToken {
	t.twoFactorTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t twoFactorToken) replaceDB(db *gorm.DB) twoFactorToken {
	t.twoFactorTokenDo.ReplaceDB(db)
	return t
}

type twoFactorTokenDo struct{ gen.DO }

type ITwoFactorTokenDo interface {
	gen.SubQuery
	Debug() ITwoFactorTokenDo
	WithContext(ctx context.Context) ITwoFactorTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITwoFactorTokenDo
	WriteDB() ITwoFactorTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITwoFactorTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITwoFactorTokenDo
	Not(conds ...gen.Condition) ITwoFactorTokenDo
	Or(conds ...gen.Condition) ITwoFactorTokenDo
	Select(conds ...field.Expr) ITwoFactorTokenDo
	Where(conds ...gen.Condition) ITwoFactorTokenDo
	Order(conds ...field.Expr) ITwoFactorTokenDo
	Distinct(cols ...field.Expr) ITwoFactorTokenDo
	Omit(cols ...field.Expr) ITwoFactorTokenDo
	Join(table schema.Tabler, on ...field.Expr) ITwoFactorTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITwoFactorTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITwoFactorTokenDo
	Group(cols ...field.Expr) ITwoFactorTokenDo
	Having(conds ...gen.Condition) ITwoFactorTokenDo
	Limit(limit int) ITwoFactorTokenDo
	Offset(offset int) ITwoFactorTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITwoFactorTokenDo
	Unscoped() ITwoFactorTokenDo
	Create(values ...*model.TwoFactorToken) error
	CreateInBatches(values []*model.TwoFactorToken, batchSize int) error
	Save(values ...*model.TwoFactorToken) error
	First() (*model.TwoFactorToken, error)
	Take() (*model.TwoFactorToken, error)
	Last() (*model.TwoFactorToken, error)
	Find() ([]*model.TwoFactorToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TwoFactorToken, err error)
	FindInBatches(result *[]*model.TwoFactorToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TwoFactorToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITwoFactorTokenDo
	Assign(attrs ...field.AssignExpr) ITwoFactorTokenDo
	Joins(fields ...field.RelationField) ITwoFactorTokenDo
	Preload(fields ...field.RelationField) ITwoFactorTokenDo
	FirstOrInit() (*model.TwoFactorToken, error)
	FirstOrCreate() (*model.TwoFactorToken, error)
	FindByPage(offset int, limit int) (result []*model.TwoFactorToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITwoFactorTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t twoFactorTokenDo) Debug() ITwoFactorTokenDo {
	return t.withDO(t.DO.Debug())
}

func (t twoFactorTokenDo) WithContext(ctx context.Context) ITwoFactorTokenDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t twoFactorTokenDo) ReadDB() ITwoFactorTokenDo {
	return t.Clauses(dbresolver.Read)
}

func (t twoFactorTokenDo) WriteDB() ITwoFactorTokenDo {
	return t.Clauses(dbresolver.Write)
}

func (t twoFactorTokenDo) Session(config *gorm.Session) ITwoFactorTokenDo {
	return t.withDO(t.DO.Session(config))
}

func (t twoFactorTokenDo) Clauses(conds ...clause.Expression) ITwoFactorTokenDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t twoFactorTokenDo) Returning(value interface{}, columns ...string) ITwoFactorTokenDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t twoFactorTokenDo) Not(conds ...gen.Condition) ITwoFactorTokenDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t twoFactorTokenDo) Or(conds ...gen.Condition) ITwoFactorTokenDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t twoFactorTokenDo) Select(conds ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t twoFactorTokenDo) Where(conds ...gen.Condition) ITwoFactorTokenDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t twoFactorTokenDo) Order(conds ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t twoFactorTokenDo) Distinct(cols ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t twoFactorTokenDo) Omit(cols ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t twoFactorTokenDo) Join(table schema.Tabler, on ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t twoFactorTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t twoFactorTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t twoFactorTokenDo) Group(cols ...field.Expr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t twoFactorTokenDo) Having(conds ...gen.Condition) ITwoFactorTokenDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t twoFactorTokenDo) Limit(limit int) ITwoFactorTokenDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t twoFactorTokenDo) Offset(offset int) ITwoFactorTokenDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t twoFactorTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITwoFactorTokenDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t twoFactorTokenDo) Unscoped() ITwoFactorTokenDo {
	return t.withDO(t.DO.Unscoped())
}

func (t twoFactorTokenDo) Create(values ...*model.TwoFactorToken) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t twoFactorTokenDo) CreateInBatches(values []*model.TwoFactorToken, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t twoFactorTokenDo) Save(values ...*model.TwoFactorToken) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t twoFactorTokenDo) First() (*model.TwoFactorToken, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorToken), nil
	}
}

func (t twoFactorTokenDo) Take() (*model.TwoFactorToken, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorToken), nil
	}
}

func (t twoFactorTokenDo) Last() (*model.TwoFactorToken, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorToken), nil
	}
}

func (t twoFactorTokenDo) Find() ([]*model.TwoFactorToken, error) {
	result, err := t.DO.Find()
	return result.([]*model.TwoFactorToken), err
}

func (t twoFactorTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TwoFactorToken, err error) {
	buf := make([]*model.TwoFactorToken, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t twoFactorTokenDo) FindInBatches(result *[]*model.TwoFactorToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t twoFactorTokenDo) Attrs(attrs ...field.AssignExpr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t twoFactorTokenDo) Assign(attrs ...field.AssignExpr) ITwoFactorTokenDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t twoFactorTokenDo) Joins(fields ...field.RelationField) ITwoFactorTokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t twoFactorTokenDo) Preload(fields ...field.RelationField) ITwoFactorTokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t twoFactorTokenDo) FirstOrInit() (*model.TwoFactorToken, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorToken), nil
	}
}

func (t twoFactorTokenDo) FirstOrCreate() (*model.TwoFactorToken, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TwoFactorToken), nil
	}
}

func (t twoFactorTokenDo) FindByPage(offset int, limit int) (result []*model.TwoFactorToken, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t twoFactorTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t twoFactorTokenDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t twoFactorTokenDo) Delete(models ...*model.TwoFactorToken) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *twoFactorTokenDo) withDO(do gen.Dao) *twoFactorTokenDo {
	t.DO = *do.(*gen.DO)
	return t
}

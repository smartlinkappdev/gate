// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/model"
)

func newSlURLStatus(db *gorm.DB, opts ...gen.DOOption) slURLStatus {
	_slURLStatus := slURLStatus{}

	_slURLStatus.slURLStatusDo.UseDB(db, opts...)
	_slURLStatus.slURLStatusDo.UseModel(&model.SlURLStatus{})

	tableName := _slURLStatus.slURLStatusDo.TableName()
	_slURLStatus.ALL = field.NewAsterisk(tableName)
	_slURLStatus.SlName = field.NewString(tableName, "sl_name")
	_slURLStatus.URLStatusCode = field.NewInt32(tableName, "url_status_code")
	_slURLStatus.URL = field.NewString(tableName, "url")
	_slURLStatus.URLLastModifiedHeader = field.NewTime(tableName, "url_last_modified_header")
	_slURLStatus.LastCheckedAt = field.NewTime(tableName, "last_checked_at")

	_slURLStatus.fillFieldMap()

	return _slURLStatus
}

type slURLStatus struct {
	slURLStatusDo

	ALL                   field.Asterisk
	SlName                field.String
	URLStatusCode         field.Int32
	URL                   field.String
	URLLastModifiedHeader field.Time
	LastCheckedAt         field.Time

	fieldMap map[string]field.Expr
}

func (s slURLStatus) Table(newTableName string) *slURLStatus {
	s.slURLStatusDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slURLStatus) As(alias string) *slURLStatus {
	s.slURLStatusDo.DO = *(s.slURLStatusDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slURLStatus) updateTableName(table string) *slURLStatus {
	s.ALL = field.NewAsterisk(table)
	s.SlName = field.NewString(table, "sl_name")
	s.URLStatusCode = field.NewInt32(table, "url_status_code")
	s.URL = field.NewString(table, "url")
	s.URLLastModifiedHeader = field.NewTime(table, "url_last_modified_header")
	s.LastCheckedAt = field.NewTime(table, "last_checked_at")

	s.fillFieldMap()

	return s
}

func (s *slURLStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slURLStatus) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["sl_name"] = s.SlName
	s.fieldMap["url_status_code"] = s.URLStatusCode
	s.fieldMap["url"] = s.URL
	s.fieldMap["url_last_modified_header"] = s.URLLastModifiedHeader
	s.fieldMap["last_checked_at"] = s.LastCheckedAt
}

func (s slURLStatus) clone(db *gorm.DB) slURLStatus {
	s.slURLStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slURLStatus) replaceDB(db *gorm.DB) slURLStatus {
	s.slURLStatusDo.ReplaceDB(db)
	return s
}

type slURLStatusDo struct{ gen.DO }

type ISlURLStatusDo interface {
	gen.SubQuery
	Debug() ISlURLStatusDo
	WithContext(ctx context.Context) ISlURLStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlURLStatusDo
	WriteDB() ISlURLStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlURLStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlURLStatusDo
	Not(conds ...gen.Condition) ISlURLStatusDo
	Or(conds ...gen.Condition) ISlURLStatusDo
	Select(conds ...field.Expr) ISlURLStatusDo
	Where(conds ...gen.Condition) ISlURLStatusDo
	Order(conds ...field.Expr) ISlURLStatusDo
	Distinct(cols ...field.Expr) ISlURLStatusDo
	Omit(cols ...field.Expr) ISlURLStatusDo
	Join(table schema.Tabler, on ...field.Expr) ISlURLStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlURLStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlURLStatusDo
	Group(cols ...field.Expr) ISlURLStatusDo
	Having(conds ...gen.Condition) ISlURLStatusDo
	Limit(limit int) ISlURLStatusDo
	Offset(offset int) ISlURLStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlURLStatusDo
	Unscoped() ISlURLStatusDo
	Create(values ...*model.SlURLStatus) error
	CreateInBatches(values []*model.SlURLStatus, batchSize int) error
	Save(values ...*model.SlURLStatus) error
	First() (*model.SlURLStatus, error)
	Take() (*model.SlURLStatus, error)
	Last() (*model.SlURLStatus, error)
	Find() ([]*model.SlURLStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SlURLStatus, err error)
	FindInBatches(result *[]*model.SlURLStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SlURLStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlURLStatusDo
	Assign(attrs ...field.AssignExpr) ISlURLStatusDo
	Joins(fields ...field.RelationField) ISlURLStatusDo
	Preload(fields ...field.RelationField) ISlURLStatusDo
	FirstOrInit() (*model.SlURLStatus, error)
	FirstOrCreate() (*model.SlURLStatus, error)
	FindByPage(offset int, limit int) (result []*model.SlURLStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlURLStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slURLStatusDo) Debug() ISlURLStatusDo {
	return s.withDO(s.DO.Debug())
}

func (s slURLStatusDo) WithContext(ctx context.Context) ISlURLStatusDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slURLStatusDo) ReadDB() ISlURLStatusDo {
	return s.Clauses(dbresolver.Read)
}

func (s slURLStatusDo) WriteDB() ISlURLStatusDo {
	return s.Clauses(dbresolver.Write)
}

func (s slURLStatusDo) Session(config *gorm.Session) ISlURLStatusDo {
	return s.withDO(s.DO.Session(config))
}

func (s slURLStatusDo) Clauses(conds ...clause.Expression) ISlURLStatusDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slURLStatusDo) Returning(value interface{}, columns ...string) ISlURLStatusDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slURLStatusDo) Not(conds ...gen.Condition) ISlURLStatusDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slURLStatusDo) Or(conds ...gen.Condition) ISlURLStatusDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slURLStatusDo) Select(conds ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slURLStatusDo) Where(conds ...gen.Condition) ISlURLStatusDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slURLStatusDo) Order(conds ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slURLStatusDo) Distinct(cols ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slURLStatusDo) Omit(cols ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slURLStatusDo) Join(table schema.Tabler, on ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slURLStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slURLStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slURLStatusDo) Group(cols ...field.Expr) ISlURLStatusDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slURLStatusDo) Having(conds ...gen.Condition) ISlURLStatusDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slURLStatusDo) Limit(limit int) ISlURLStatusDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slURLStatusDo) Offset(offset int) ISlURLStatusDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slURLStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlURLStatusDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slURLStatusDo) Unscoped() ISlURLStatusDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slURLStatusDo) Create(values ...*model.SlURLStatus) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slURLStatusDo) CreateInBatches(values []*model.SlURLStatus, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slURLStatusDo) Save(values ...*model.SlURLStatus) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slURLStatusDo) First() (*model.SlURLStatus, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlURLStatus), nil
	}
}

func (s slURLStatusDo) Take() (*model.SlURLStatus, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlURLStatus), nil
	}
}

func (s slURLStatusDo) Last() (*model.SlURLStatus, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlURLStatus), nil
	}
}

func (s slURLStatusDo) Find() ([]*model.SlURLStatus, error) {
	result, err := s.DO.Find()
	return result.([]*model.SlURLStatus), err
}

func (s slURLStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SlURLStatus, err error) {
	buf := make([]*model.SlURLStatus, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slURLStatusDo) FindInBatches(result *[]*model.SlURLStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slURLStatusDo) Attrs(attrs ...field.AssignExpr) ISlURLStatusDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slURLStatusDo) Assign(attrs ...field.AssignExpr) ISlURLStatusDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slURLStatusDo) Joins(fields ...field.RelationField) ISlURLStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slURLStatusDo) Preload(fields ...field.RelationField) ISlURLStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slURLStatusDo) FirstOrInit() (*model.SlURLStatus, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlURLStatus), nil
	}
}

func (s slURLStatusDo) FirstOrCreate() (*model.SlURLStatus, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SlURLStatus), nil
	}
}

func (s slURLStatusDo) FindByPage(offset int, limit int) (result []*model.SlURLStatus, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slURLStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slURLStatusDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slURLStatusDo) Delete(models ...*model.SlURLStatus) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slURLStatusDo) withDO(do gen.Dao) *slURLStatusDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newDimensionReference(db *gorm.DB, opts ...gen.DOOption) dimensionReference {
	_dimensionReference := dimensionReference{}

	_dimensionReference.dimensionReferenceDo.UseDB(db, opts...)
	_dimensionReference.dimensionReferenceDo.UseModel(&model.DimensionReference{})

	tableName := _dimensionReference.dimensionReferenceDo.TableName()
	_dimensionReference.ALL = field.NewAsterisk(tableName)
	_dimensionReference.ID = field.NewInt32(tableName, "id")
	_dimensionReference.Name = field.NewString(tableName, "name")
	_dimensionReference.Value = field.NewString(tableName, "value")

	_dimensionReference.fillFieldMap()

	return _dimensionReference
}

type dimensionReference struct {
	dimensionReferenceDo

	ALL   field.Asterisk
	ID    field.Int32
	Name  field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (d dimensionReference) Table(newTableName string) *dimensionReference {
	d.dimensionReferenceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dimensionReference) As(alias string) *dimensionReference {
	d.dimensionReferenceDo.DO = *(d.dimensionReferenceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dimensionReference) updateTableName(table string) *dimensionReference {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Name = field.NewString(table, "name")
	d.Value = field.NewString(table, "value")

	d.fillFieldMap()

	return d
}

func (d *dimensionReference) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dimensionReference) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["value"] = d.Value
}

func (d dimensionReference) clone(db *gorm.DB) dimensionReference {
	d.dimensionReferenceDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dimensionReference) replaceDB(db *gorm.DB) dimensionReference {
	d.dimensionReferenceDo.ReplaceDB(db)
	return d
}

type dimensionReferenceDo struct{ gen.DO }

type IDimensionReferenceDo interface {
	gen.SubQuery
	Debug() IDimensionReferenceDo
	WithContext(ctx context.Context) IDimensionReferenceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDimensionReferenceDo
	WriteDB() IDimensionReferenceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDimensionReferenceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDimensionReferenceDo
	Not(conds ...gen.Condition) IDimensionReferenceDo
	Or(conds ...gen.Condition) IDimensionReferenceDo
	Select(conds ...field.Expr) IDimensionReferenceDo
	Where(conds ...gen.Condition) IDimensionReferenceDo
	Order(conds ...field.Expr) IDimensionReferenceDo
	Distinct(cols ...field.Expr) IDimensionReferenceDo
	Omit(cols ...field.Expr) IDimensionReferenceDo
	Join(table schema.Tabler, on ...field.Expr) IDimensionReferenceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDimensionReferenceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDimensionReferenceDo
	Group(cols ...field.Expr) IDimensionReferenceDo
	Having(conds ...gen.Condition) IDimensionReferenceDo
	Limit(limit int) IDimensionReferenceDo
	Offset(offset int) IDimensionReferenceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDimensionReferenceDo
	Unscoped() IDimensionReferenceDo
	Create(values ...*model.DimensionReference) error
	CreateInBatches(values []*model.DimensionReference, batchSize int) error
	Save(values ...*model.DimensionReference) error
	First() (*model.DimensionReference, error)
	Take() (*model.DimensionReference, error)
	Last() (*model.DimensionReference, error)
	Find() ([]*model.DimensionReference, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DimensionReference, err error)
	FindInBatches(result *[]*model.DimensionReference, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DimensionReference) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDimensionReferenceDo
	Assign(attrs ...field.AssignExpr) IDimensionReferenceDo
	Joins(fields ...field.RelationField) IDimensionReferenceDo
	Preload(fields ...field.RelationField) IDimensionReferenceDo
	FirstOrInit() (*model.DimensionReference, error)
	FirstOrCreate() (*model.DimensionReference, error)
	FindByPage(offset int, limit int) (result []*model.DimensionReference, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDimensionReferenceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dimensionReferenceDo) Debug() IDimensionReferenceDo {
	return d.withDO(d.DO.Debug())
}

func (d dimensionReferenceDo) WithContext(ctx context.Context) IDimensionReferenceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dimensionReferenceDo) ReadDB() IDimensionReferenceDo {
	return d.Clauses(dbresolver.Read)
}

func (d dimensionReferenceDo) WriteDB() IDimensionReferenceDo {
	return d.Clauses(dbresolver.Write)
}

func (d dimensionReferenceDo) Session(config *gorm.Session) IDimensionReferenceDo {
	return d.withDO(d.DO.Session(config))
}

func (d dimensionReferenceDo) Clauses(conds ...clause.Expression) IDimensionReferenceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dimensionReferenceDo) Returning(value interface{}, columns ...string) IDimensionReferenceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dimensionReferenceDo) Not(conds ...gen.Condition) IDimensionReferenceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dimensionReferenceDo) Or(conds ...gen.Condition) IDimensionReferenceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dimensionReferenceDo) Select(conds ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dimensionReferenceDo) Where(conds ...gen.Condition) IDimensionReferenceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dimensionReferenceDo) Order(conds ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dimensionReferenceDo) Distinct(cols ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dimensionReferenceDo) Omit(cols ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dimensionReferenceDo) Join(table schema.Tabler, on ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dimensionReferenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dimensionReferenceDo) RightJoin(table schema.Tabler, on ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dimensionReferenceDo) Group(cols ...field.Expr) IDimensionReferenceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dimensionReferenceDo) Having(conds ...gen.Condition) IDimensionReferenceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dimensionReferenceDo) Limit(limit int) IDimensionReferenceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dimensionReferenceDo) Offset(offset int) IDimensionReferenceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dimensionReferenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDimensionReferenceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dimensionReferenceDo) Unscoped() IDimensionReferenceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dimensionReferenceDo) Create(values ...*model.DimensionReference) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dimensionReferenceDo) CreateInBatches(values []*model.DimensionReference, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dimensionReferenceDo) Save(values ...*model.DimensionReference) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dimensionReferenceDo) First() (*model.DimensionReference, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DimensionReference), nil
	}
}

func (d dimensionReferenceDo) Take() (*model.DimensionReference, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DimensionReference), nil
	}
}

func (d dimensionReferenceDo) Last() (*model.DimensionReference, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DimensionReference), nil
	}
}

func (d dimensionReferenceDo) Find() ([]*model.DimensionReference, error) {
	result, err := d.DO.Find()
	return result.([]*model.DimensionReference), err
}

func (d dimensionReferenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DimensionReference, err error) {
	buf := make([]*model.DimensionReference, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dimensionReferenceDo) FindInBatches(result *[]*model.DimensionReference, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dimensionReferenceDo) Attrs(attrs ...field.AssignExpr) IDimensionReferenceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dimensionReferenceDo) Assign(attrs ...field.AssignExpr) IDimensionReferenceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dimensionReferenceDo) Joins(fields ...field.RelationField) IDimensionReferenceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dimensionReferenceDo) Preload(fields ...field.RelationField) IDimensionReferenceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dimensionReferenceDo) FirstOrInit() (*model.DimensionReference, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DimensionReference), nil
	}
}

func (d dimensionReferenceDo) FirstOrCreate() (*model.DimensionReference, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DimensionReference), nil
	}
}

func (d dimensionReferenceDo) FindByPage(offset int, limit int) (result []*model.DimensionReference, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dimensionReferenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dimensionReferenceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dimensionReferenceDo) Delete(models ...*model.DimensionReference) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dimensionReferenceDo) withDO(do gen.Dao) *dimensionReferenceDo {
	d.DO = *do.(*gen.DO)
	return d
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newAggYmDataUtmMedium(db *gorm.DB, opts ...gen.DOOption) aggYmDataUtmMedium {
	_aggYmDataUtmMedium := aggYmDataUtmMedium{}

	_aggYmDataUtmMedium.aggYmDataUtmMediumDo.UseDB(db, opts...)
	_aggYmDataUtmMedium.aggYmDataUtmMediumDo.UseModel(&model.AggYmDataUtmMedium{})

	tableName := _aggYmDataUtmMedium.aggYmDataUtmMediumDo.TableName()
	_aggYmDataUtmMedium.ALL = field.NewAsterisk(tableName)
	_aggYmDataUtmMedium.Timestamp = field.NewTime(tableName, "timestamp")
	_aggYmDataUtmMedium.UtmMedium = field.NewString(tableName, "utm_medium")
	_aggYmDataUtmMedium.Pageviews = field.NewInt32(tableName, "pageviews")
	_aggYmDataUtmMedium.Users = field.NewInt32(tableName, "users")

	_aggYmDataUtmMedium.fillFieldMap()

	return _aggYmDataUtmMedium
}

type aggYmDataUtmMedium struct {
	aggYmDataUtmMediumDo

	ALL       field.Asterisk
	Timestamp field.Time
	UtmMedium field.String
	Pageviews field.Int32
	Users     field.Int32

	fieldMap map[string]field.Expr
}

func (a aggYmDataUtmMedium) Table(newTableName string) *aggYmDataUtmMedium {
	a.aggYmDataUtmMediumDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aggYmDataUtmMedium) As(alias string) *aggYmDataUtmMedium {
	a.aggYmDataUtmMediumDo.DO = *(a.aggYmDataUtmMediumDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aggYmDataUtmMedium) updateTableName(table string) *aggYmDataUtmMedium {
	a.ALL = field.NewAsterisk(table)
	a.Timestamp = field.NewTime(table, "timestamp")
	a.UtmMedium = field.NewString(table, "utm_medium")
	a.Pageviews = field.NewInt32(table, "pageviews")
	a.Users = field.NewInt32(table, "users")

	a.fillFieldMap()

	return a
}

func (a *aggYmDataUtmMedium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aggYmDataUtmMedium) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["utm_medium"] = a.UtmMedium
	a.fieldMap["pageviews"] = a.Pageviews
	a.fieldMap["users"] = a.Users
}

func (a aggYmDataUtmMedium) clone(db *gorm.DB) aggYmDataUtmMedium {
	a.aggYmDataUtmMediumDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aggYmDataUtmMedium) replaceDB(db *gorm.DB) aggYmDataUtmMedium {
	a.aggYmDataUtmMediumDo.ReplaceDB(db)
	return a
}

type aggYmDataUtmMediumDo struct{ gen.DO }

type IAggYmDataUtmMediumDo interface {
	gen.SubQuery
	Debug() IAggYmDataUtmMediumDo
	WithContext(ctx context.Context) IAggYmDataUtmMediumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAggYmDataUtmMediumDo
	WriteDB() IAggYmDataUtmMediumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAggYmDataUtmMediumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAggYmDataUtmMediumDo
	Not(conds ...gen.Condition) IAggYmDataUtmMediumDo
	Or(conds ...gen.Condition) IAggYmDataUtmMediumDo
	Select(conds ...field.Expr) IAggYmDataUtmMediumDo
	Where(conds ...gen.Condition) IAggYmDataUtmMediumDo
	Order(conds ...field.Expr) IAggYmDataUtmMediumDo
	Distinct(cols ...field.Expr) IAggYmDataUtmMediumDo
	Omit(cols ...field.Expr) IAggYmDataUtmMediumDo
	Join(table schema.Tabler, on ...field.Expr) IAggYmDataUtmMediumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmMediumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmMediumDo
	Group(cols ...field.Expr) IAggYmDataUtmMediumDo
	Having(conds ...gen.Condition) IAggYmDataUtmMediumDo
	Limit(limit int) IAggYmDataUtmMediumDo
	Offset(offset int) IAggYmDataUtmMediumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataUtmMediumDo
	Unscoped() IAggYmDataUtmMediumDo
	Create(values ...*model.AggYmDataUtmMedium) error
	CreateInBatches(values []*model.AggYmDataUtmMedium, batchSize int) error
	Save(values ...*model.AggYmDataUtmMedium) error
	First() (*model.AggYmDataUtmMedium, error)
	Take() (*model.AggYmDataUtmMedium, error)
	Last() (*model.AggYmDataUtmMedium, error)
	Find() ([]*model.AggYmDataUtmMedium, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataUtmMedium, err error)
	FindInBatches(result *[]*model.AggYmDataUtmMedium, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AggYmDataUtmMedium) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAggYmDataUtmMediumDo
	Assign(attrs ...field.AssignExpr) IAggYmDataUtmMediumDo
	Joins(fields ...field.RelationField) IAggYmDataUtmMediumDo
	Preload(fields ...field.RelationField) IAggYmDataUtmMediumDo
	FirstOrInit() (*model.AggYmDataUtmMedium, error)
	FirstOrCreate() (*model.AggYmDataUtmMedium, error)
	FindByPage(offset int, limit int) (result []*model.AggYmDataUtmMedium, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAggYmDataUtmMediumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aggYmDataUtmMediumDo) Debug() IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Debug())
}

func (a aggYmDataUtmMediumDo) WithContext(ctx context.Context) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aggYmDataUtmMediumDo) ReadDB() IAggYmDataUtmMediumDo {
	return a.Clauses(dbresolver.Read)
}

func (a aggYmDataUtmMediumDo) WriteDB() IAggYmDataUtmMediumDo {
	return a.Clauses(dbresolver.Write)
}

func (a aggYmDataUtmMediumDo) Session(config *gorm.Session) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Session(config))
}

func (a aggYmDataUtmMediumDo) Clauses(conds ...clause.Expression) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aggYmDataUtmMediumDo) Returning(value interface{}, columns ...string) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aggYmDataUtmMediumDo) Not(conds ...gen.Condition) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aggYmDataUtmMediumDo) Or(conds ...gen.Condition) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aggYmDataUtmMediumDo) Select(conds ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aggYmDataUtmMediumDo) Where(conds ...gen.Condition) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aggYmDataUtmMediumDo) Order(conds ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aggYmDataUtmMediumDo) Distinct(cols ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aggYmDataUtmMediumDo) Omit(cols ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aggYmDataUtmMediumDo) Join(table schema.Tabler, on ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aggYmDataUtmMediumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aggYmDataUtmMediumDo) RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aggYmDataUtmMediumDo) Group(cols ...field.Expr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aggYmDataUtmMediumDo) Having(conds ...gen.Condition) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aggYmDataUtmMediumDo) Limit(limit int) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aggYmDataUtmMediumDo) Offset(offset int) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aggYmDataUtmMediumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aggYmDataUtmMediumDo) Unscoped() IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aggYmDataUtmMediumDo) Create(values ...*model.AggYmDataUtmMedium) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aggYmDataUtmMediumDo) CreateInBatches(values []*model.AggYmDataUtmMedium, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aggYmDataUtmMediumDo) Save(values ...*model.AggYmDataUtmMedium) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aggYmDataUtmMediumDo) First() (*model.AggYmDataUtmMedium, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmMedium), nil
	}
}

func (a aggYmDataUtmMediumDo) Take() (*model.AggYmDataUtmMedium, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmMedium), nil
	}
}

func (a aggYmDataUtmMediumDo) Last() (*model.AggYmDataUtmMedium, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmMedium), nil
	}
}

func (a aggYmDataUtmMediumDo) Find() ([]*model.AggYmDataUtmMedium, error) {
	result, err := a.DO.Find()
	return result.([]*model.AggYmDataUtmMedium), err
}

func (a aggYmDataUtmMediumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataUtmMedium, err error) {
	buf := make([]*model.AggYmDataUtmMedium, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aggYmDataUtmMediumDo) FindInBatches(result *[]*model.AggYmDataUtmMedium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aggYmDataUtmMediumDo) Attrs(attrs ...field.AssignExpr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aggYmDataUtmMediumDo) Assign(attrs ...field.AssignExpr) IAggYmDataUtmMediumDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aggYmDataUtmMediumDo) Joins(fields ...field.RelationField) IAggYmDataUtmMediumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aggYmDataUtmMediumDo) Preload(fields ...field.RelationField) IAggYmDataUtmMediumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aggYmDataUtmMediumDo) FirstOrInit() (*model.AggYmDataUtmMedium, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmMedium), nil
	}
}

func (a aggYmDataUtmMediumDo) FirstOrCreate() (*model.AggYmDataUtmMedium, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmMedium), nil
	}
}

func (a aggYmDataUtmMediumDo) FindByPage(offset int, limit int) (result []*model.AggYmDataUtmMedium, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aggYmDataUtmMediumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aggYmDataUtmMediumDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aggYmDataUtmMediumDo) Delete(models ...*model.AggYmDataUtmMedium) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aggYmDataUtmMediumDo) withDO(do gen.Dao) *aggYmDataUtmMediumDo {
	a.DO = *do.(*gen.DO)
	return a
}

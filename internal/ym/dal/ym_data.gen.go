// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newYmDatum(db *gorm.DB, opts ...gen.DOOption) ymDatum {
	_ymDatum := ymDatum{}

	_ymDatum.ymDatumDo.UseDB(db, opts...)
	_ymDatum.ymDatumDo.UseModel(&model.YmDatum{})

	tableName := _ymDatum.ymDatumDo.TableName()
	_ymDatum.ALL = field.NewAsterisk(tableName)
	_ymDatum.ID = field.NewInt32(tableName, "id")
	_ymDatum.Timestamp = field.NewTime(tableName, "timestamp")
	_ymDatum.URLPath = field.NewString(tableName, "url_path")
	_ymDatum.Browser = field.NewString(tableName, "browser")
	_ymDatum.Device = field.NewString(tableName, "device")
	_ymDatum.OperatingSystem = field.NewString(tableName, "operating_system")
	_ymDatum.Pageviews = field.NewInt32(tableName, "pageviews")
	_ymDatum.Users = field.NewInt32(tableName, "users")

	_ymDatum.fillFieldMap()

	return _ymDatum
}

type ymDatum struct {
	ymDatumDo

	ALL             field.Asterisk
	ID              field.Int32
	Timestamp       field.Time
	URLPath         field.String
	Browser         field.String
	Device          field.String
	OperatingSystem field.String
	Pageviews       field.Int32
	Users           field.Int32

	fieldMap map[string]field.Expr
}

func (y ymDatum) Table(newTableName string) *ymDatum {
	y.ymDatumDo.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y ymDatum) As(alias string) *ymDatum {
	y.ymDatumDo.DO = *(y.ymDatumDo.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *ymDatum) updateTableName(table string) *ymDatum {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt32(table, "id")
	y.Timestamp = field.NewTime(table, "timestamp")
	y.URLPath = field.NewString(table, "url_path")
	y.Browser = field.NewString(table, "browser")
	y.Device = field.NewString(table, "device")
	y.OperatingSystem = field.NewString(table, "operating_system")
	y.Pageviews = field.NewInt32(table, "pageviews")
	y.Users = field.NewInt32(table, "users")

	y.fillFieldMap()

	return y
}

func (y *ymDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *ymDatum) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 8)
	y.fieldMap["id"] = y.ID
	y.fieldMap["timestamp"] = y.Timestamp
	y.fieldMap["url_path"] = y.URLPath
	y.fieldMap["browser"] = y.Browser
	y.fieldMap["device"] = y.Device
	y.fieldMap["operating_system"] = y.OperatingSystem
	y.fieldMap["pageviews"] = y.Pageviews
	y.fieldMap["users"] = y.Users
}

func (y ymDatum) clone(db *gorm.DB) ymDatum {
	y.ymDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y ymDatum) replaceDB(db *gorm.DB) ymDatum {
	y.ymDatumDo.ReplaceDB(db)
	return y
}

type ymDatumDo struct{ gen.DO }

type IYmDatumDo interface {
	gen.SubQuery
	Debug() IYmDatumDo
	WithContext(ctx context.Context) IYmDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IYmDatumDo
	WriteDB() IYmDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IYmDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IYmDatumDo
	Not(conds ...gen.Condition) IYmDatumDo
	Or(conds ...gen.Condition) IYmDatumDo
	Select(conds ...field.Expr) IYmDatumDo
	Where(conds ...gen.Condition) IYmDatumDo
	Order(conds ...field.Expr) IYmDatumDo
	Distinct(cols ...field.Expr) IYmDatumDo
	Omit(cols ...field.Expr) IYmDatumDo
	Join(table schema.Tabler, on ...field.Expr) IYmDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IYmDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IYmDatumDo
	Group(cols ...field.Expr) IYmDatumDo
	Having(conds ...gen.Condition) IYmDatumDo
	Limit(limit int) IYmDatumDo
	Offset(offset int) IYmDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IYmDatumDo
	Unscoped() IYmDatumDo
	Create(values ...*model.YmDatum) error
	CreateInBatches(values []*model.YmDatum, batchSize int) error
	Save(values ...*model.YmDatum) error
	First() (*model.YmDatum, error)
	Take() (*model.YmDatum, error)
	Last() (*model.YmDatum, error)
	Find() ([]*model.YmDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmDatum, err error)
	FindInBatches(result *[]*model.YmDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.YmDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IYmDatumDo
	Assign(attrs ...field.AssignExpr) IYmDatumDo
	Joins(fields ...field.RelationField) IYmDatumDo
	Preload(fields ...field.RelationField) IYmDatumDo
	FirstOrInit() (*model.YmDatum, error)
	FirstOrCreate() (*model.YmDatum, error)
	FindByPage(offset int, limit int) (result []*model.YmDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IYmDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (y ymDatumDo) Debug() IYmDatumDo {
	return y.withDO(y.DO.Debug())
}

func (y ymDatumDo) WithContext(ctx context.Context) IYmDatumDo {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y ymDatumDo) ReadDB() IYmDatumDo {
	return y.Clauses(dbresolver.Read)
}

func (y ymDatumDo) WriteDB() IYmDatumDo {
	return y.Clauses(dbresolver.Write)
}

func (y ymDatumDo) Session(config *gorm.Session) IYmDatumDo {
	return y.withDO(y.DO.Session(config))
}

func (y ymDatumDo) Clauses(conds ...clause.Expression) IYmDatumDo {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y ymDatumDo) Returning(value interface{}, columns ...string) IYmDatumDo {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y ymDatumDo) Not(conds ...gen.Condition) IYmDatumDo {
	return y.withDO(y.DO.Not(conds...))
}

func (y ymDatumDo) Or(conds ...gen.Condition) IYmDatumDo {
	return y.withDO(y.DO.Or(conds...))
}

func (y ymDatumDo) Select(conds ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.Select(conds...))
}

func (y ymDatumDo) Where(conds ...gen.Condition) IYmDatumDo {
	return y.withDO(y.DO.Where(conds...))
}

func (y ymDatumDo) Order(conds ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.Order(conds...))
}

func (y ymDatumDo) Distinct(cols ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y ymDatumDo) Omit(cols ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.Omit(cols...))
}

func (y ymDatumDo) Join(table schema.Tabler, on ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.Join(table, on...))
}

func (y ymDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y ymDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y ymDatumDo) Group(cols ...field.Expr) IYmDatumDo {
	return y.withDO(y.DO.Group(cols...))
}

func (y ymDatumDo) Having(conds ...gen.Condition) IYmDatumDo {
	return y.withDO(y.DO.Having(conds...))
}

func (y ymDatumDo) Limit(limit int) IYmDatumDo {
	return y.withDO(y.DO.Limit(limit))
}

func (y ymDatumDo) Offset(offset int) IYmDatumDo {
	return y.withDO(y.DO.Offset(offset))
}

func (y ymDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IYmDatumDo {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y ymDatumDo) Unscoped() IYmDatumDo {
	return y.withDO(y.DO.Unscoped())
}

func (y ymDatumDo) Create(values ...*model.YmDatum) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y ymDatumDo) CreateInBatches(values []*model.YmDatum, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y ymDatumDo) Save(values ...*model.YmDatum) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y ymDatumDo) First() (*model.YmDatum, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmDatum), nil
	}
}

func (y ymDatumDo) Take() (*model.YmDatum, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmDatum), nil
	}
}

func (y ymDatumDo) Last() (*model.YmDatum, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmDatum), nil
	}
}

func (y ymDatumDo) Find() ([]*model.YmDatum, error) {
	result, err := y.DO.Find()
	return result.([]*model.YmDatum), err
}

func (y ymDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.YmDatum, err error) {
	buf := make([]*model.YmDatum, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y ymDatumDo) FindInBatches(result *[]*model.YmDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y ymDatumDo) Attrs(attrs ...field.AssignExpr) IYmDatumDo {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y ymDatumDo) Assign(attrs ...field.AssignExpr) IYmDatumDo {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y ymDatumDo) Joins(fields ...field.RelationField) IYmDatumDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y ymDatumDo) Preload(fields ...field.RelationField) IYmDatumDo {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y ymDatumDo) FirstOrInit() (*model.YmDatum, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmDatum), nil
	}
}

func (y ymDatumDo) FirstOrCreate() (*model.YmDatum, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.YmDatum), nil
	}
}

func (y ymDatumDo) FindByPage(offset int, limit int) (result []*model.YmDatum, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y ymDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y ymDatumDo) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y ymDatumDo) Delete(models ...*model.YmDatum) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *ymDatumDo) withDO(do gen.Dao) *ymDatumDo {
	y.DO = *do.(*gen.DO)
	return y
}

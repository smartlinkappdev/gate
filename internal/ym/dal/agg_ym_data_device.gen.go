// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newAggYmDataDevice(db *gorm.DB, opts ...gen.DOOption) aggYmDataDevice {
	_aggYmDataDevice := aggYmDataDevice{}

	_aggYmDataDevice.aggYmDataDeviceDo.UseDB(db, opts...)
	_aggYmDataDevice.aggYmDataDeviceDo.UseModel(&model.AggYmDataDevice{})

	tableName := _aggYmDataDevice.aggYmDataDeviceDo.TableName()
	_aggYmDataDevice.ALL = field.NewAsterisk(tableName)
	_aggYmDataDevice.Timestamp = field.NewTime(tableName, "timestamp")
	_aggYmDataDevice.Device = field.NewString(tableName, "device")
	_aggYmDataDevice.Pageviews = field.NewInt32(tableName, "pageviews")
	_aggYmDataDevice.Users = field.NewInt32(tableName, "users")

	_aggYmDataDevice.fillFieldMap()

	return _aggYmDataDevice
}

type aggYmDataDevice struct {
	aggYmDataDeviceDo

	ALL       field.Asterisk
	Timestamp field.Time
	Device    field.String
	Pageviews field.Int32
	Users     field.Int32

	fieldMap map[string]field.Expr
}

func (a aggYmDataDevice) Table(newTableName string) *aggYmDataDevice {
	a.aggYmDataDeviceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aggYmDataDevice) As(alias string) *aggYmDataDevice {
	a.aggYmDataDeviceDo.DO = *(a.aggYmDataDeviceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aggYmDataDevice) updateTableName(table string) *aggYmDataDevice {
	a.ALL = field.NewAsterisk(table)
	a.Timestamp = field.NewTime(table, "timestamp")
	a.Device = field.NewString(table, "device")
	a.Pageviews = field.NewInt32(table, "pageviews")
	a.Users = field.NewInt32(table, "users")

	a.fillFieldMap()

	return a
}

func (a *aggYmDataDevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aggYmDataDevice) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["device"] = a.Device
	a.fieldMap["pageviews"] = a.Pageviews
	a.fieldMap["users"] = a.Users
}

func (a aggYmDataDevice) clone(db *gorm.DB) aggYmDataDevice {
	a.aggYmDataDeviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aggYmDataDevice) replaceDB(db *gorm.DB) aggYmDataDevice {
	a.aggYmDataDeviceDo.ReplaceDB(db)
	return a
}

type aggYmDataDeviceDo struct{ gen.DO }

type IAggYmDataDeviceDo interface {
	gen.SubQuery
	Debug() IAggYmDataDeviceDo
	WithContext(ctx context.Context) IAggYmDataDeviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAggYmDataDeviceDo
	WriteDB() IAggYmDataDeviceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAggYmDataDeviceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAggYmDataDeviceDo
	Not(conds ...gen.Condition) IAggYmDataDeviceDo
	Or(conds ...gen.Condition) IAggYmDataDeviceDo
	Select(conds ...field.Expr) IAggYmDataDeviceDo
	Where(conds ...gen.Condition) IAggYmDataDeviceDo
	Order(conds ...field.Expr) IAggYmDataDeviceDo
	Distinct(cols ...field.Expr) IAggYmDataDeviceDo
	Omit(cols ...field.Expr) IAggYmDataDeviceDo
	Join(table schema.Tabler, on ...field.Expr) IAggYmDataDeviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataDeviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataDeviceDo
	Group(cols ...field.Expr) IAggYmDataDeviceDo
	Having(conds ...gen.Condition) IAggYmDataDeviceDo
	Limit(limit int) IAggYmDataDeviceDo
	Offset(offset int) IAggYmDataDeviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataDeviceDo
	Unscoped() IAggYmDataDeviceDo
	Create(values ...*model.AggYmDataDevice) error
	CreateInBatches(values []*model.AggYmDataDevice, batchSize int) error
	Save(values ...*model.AggYmDataDevice) error
	First() (*model.AggYmDataDevice, error)
	Take() (*model.AggYmDataDevice, error)
	Last() (*model.AggYmDataDevice, error)
	Find() ([]*model.AggYmDataDevice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataDevice, err error)
	FindInBatches(result *[]*model.AggYmDataDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AggYmDataDevice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAggYmDataDeviceDo
	Assign(attrs ...field.AssignExpr) IAggYmDataDeviceDo
	Joins(fields ...field.RelationField) IAggYmDataDeviceDo
	Preload(fields ...field.RelationField) IAggYmDataDeviceDo
	FirstOrInit() (*model.AggYmDataDevice, error)
	FirstOrCreate() (*model.AggYmDataDevice, error)
	FindByPage(offset int, limit int) (result []*model.AggYmDataDevice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAggYmDataDeviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aggYmDataDeviceDo) Debug() IAggYmDataDeviceDo {
	return a.withDO(a.DO.Debug())
}

func (a aggYmDataDeviceDo) WithContext(ctx context.Context) IAggYmDataDeviceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aggYmDataDeviceDo) ReadDB() IAggYmDataDeviceDo {
	return a.Clauses(dbresolver.Read)
}

func (a aggYmDataDeviceDo) WriteDB() IAggYmDataDeviceDo {
	return a.Clauses(dbresolver.Write)
}

func (a aggYmDataDeviceDo) Session(config *gorm.Session) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Session(config))
}

func (a aggYmDataDeviceDo) Clauses(conds ...clause.Expression) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aggYmDataDeviceDo) Returning(value interface{}, columns ...string) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aggYmDataDeviceDo) Not(conds ...gen.Condition) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aggYmDataDeviceDo) Or(conds ...gen.Condition) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aggYmDataDeviceDo) Select(conds ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aggYmDataDeviceDo) Where(conds ...gen.Condition) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aggYmDataDeviceDo) Order(conds ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aggYmDataDeviceDo) Distinct(cols ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aggYmDataDeviceDo) Omit(cols ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aggYmDataDeviceDo) Join(table schema.Tabler, on ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aggYmDataDeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aggYmDataDeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aggYmDataDeviceDo) Group(cols ...field.Expr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aggYmDataDeviceDo) Having(conds ...gen.Condition) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aggYmDataDeviceDo) Limit(limit int) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aggYmDataDeviceDo) Offset(offset int) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aggYmDataDeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aggYmDataDeviceDo) Unscoped() IAggYmDataDeviceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aggYmDataDeviceDo) Create(values ...*model.AggYmDataDevice) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aggYmDataDeviceDo) CreateInBatches(values []*model.AggYmDataDevice, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aggYmDataDeviceDo) Save(values ...*model.AggYmDataDevice) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aggYmDataDeviceDo) First() (*model.AggYmDataDevice, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataDevice), nil
	}
}

func (a aggYmDataDeviceDo) Take() (*model.AggYmDataDevice, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataDevice), nil
	}
}

func (a aggYmDataDeviceDo) Last() (*model.AggYmDataDevice, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataDevice), nil
	}
}

func (a aggYmDataDeviceDo) Find() ([]*model.AggYmDataDevice, error) {
	result, err := a.DO.Find()
	return result.([]*model.AggYmDataDevice), err
}

func (a aggYmDataDeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataDevice, err error) {
	buf := make([]*model.AggYmDataDevice, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aggYmDataDeviceDo) FindInBatches(result *[]*model.AggYmDataDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aggYmDataDeviceDo) Attrs(attrs ...field.AssignExpr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aggYmDataDeviceDo) Assign(attrs ...field.AssignExpr) IAggYmDataDeviceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aggYmDataDeviceDo) Joins(fields ...field.RelationField) IAggYmDataDeviceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aggYmDataDeviceDo) Preload(fields ...field.RelationField) IAggYmDataDeviceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aggYmDataDeviceDo) FirstOrInit() (*model.AggYmDataDevice, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataDevice), nil
	}
}

func (a aggYmDataDeviceDo) FirstOrCreate() (*model.AggYmDataDevice, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataDevice), nil
	}
}

func (a aggYmDataDeviceDo) FindByPage(offset int, limit int) (result []*model.AggYmDataDevice, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aggYmDataDeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aggYmDataDeviceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aggYmDataDeviceDo) Delete(models ...*model.AggYmDataDevice) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aggYmDataDeviceDo) withDO(do gen.Dao) *aggYmDataDeviceDo {
	a.DO = *do.(*gen.DO)
	return a
}

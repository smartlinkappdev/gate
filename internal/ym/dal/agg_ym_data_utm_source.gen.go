// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newAggYmDataUtmSource(db *gorm.DB, opts ...gen.DOOption) aggYmDataUtmSource {
	_aggYmDataUtmSource := aggYmDataUtmSource{}

	_aggYmDataUtmSource.aggYmDataUtmSourceDo.UseDB(db, opts...)
	_aggYmDataUtmSource.aggYmDataUtmSourceDo.UseModel(&model.AggYmDataUtmSource{})

	tableName := _aggYmDataUtmSource.aggYmDataUtmSourceDo.TableName()
	_aggYmDataUtmSource.ALL = field.NewAsterisk(tableName)
	_aggYmDataUtmSource.Timestamp = field.NewTime(tableName, "timestamp")
	_aggYmDataUtmSource.UtmSource = field.NewString(tableName, "utm_source")
	_aggYmDataUtmSource.Pageviews = field.NewInt32(tableName, "pageviews")
	_aggYmDataUtmSource.Users = field.NewInt32(tableName, "users")

	_aggYmDataUtmSource.fillFieldMap()

	return _aggYmDataUtmSource
}

type aggYmDataUtmSource struct {
	aggYmDataUtmSourceDo

	ALL       field.Asterisk
	Timestamp field.Time
	UtmSource field.String
	Pageviews field.Int32
	Users     field.Int32

	fieldMap map[string]field.Expr
}

func (a aggYmDataUtmSource) Table(newTableName string) *aggYmDataUtmSource {
	a.aggYmDataUtmSourceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aggYmDataUtmSource) As(alias string) *aggYmDataUtmSource {
	a.aggYmDataUtmSourceDo.DO = *(a.aggYmDataUtmSourceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aggYmDataUtmSource) updateTableName(table string) *aggYmDataUtmSource {
	a.ALL = field.NewAsterisk(table)
	a.Timestamp = field.NewTime(table, "timestamp")
	a.UtmSource = field.NewString(table, "utm_source")
	a.Pageviews = field.NewInt32(table, "pageviews")
	a.Users = field.NewInt32(table, "users")

	a.fillFieldMap()

	return a
}

func (a *aggYmDataUtmSource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aggYmDataUtmSource) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["utm_source"] = a.UtmSource
	a.fieldMap["pageviews"] = a.Pageviews
	a.fieldMap["users"] = a.Users
}

func (a aggYmDataUtmSource) clone(db *gorm.DB) aggYmDataUtmSource {
	a.aggYmDataUtmSourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aggYmDataUtmSource) replaceDB(db *gorm.DB) aggYmDataUtmSource {
	a.aggYmDataUtmSourceDo.ReplaceDB(db)
	return a
}

type aggYmDataUtmSourceDo struct{ gen.DO }

type IAggYmDataUtmSourceDo interface {
	gen.SubQuery
	Debug() IAggYmDataUtmSourceDo
	WithContext(ctx context.Context) IAggYmDataUtmSourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAggYmDataUtmSourceDo
	WriteDB() IAggYmDataUtmSourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAggYmDataUtmSourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAggYmDataUtmSourceDo
	Not(conds ...gen.Condition) IAggYmDataUtmSourceDo
	Or(conds ...gen.Condition) IAggYmDataUtmSourceDo
	Select(conds ...field.Expr) IAggYmDataUtmSourceDo
	Where(conds ...gen.Condition) IAggYmDataUtmSourceDo
	Order(conds ...field.Expr) IAggYmDataUtmSourceDo
	Distinct(cols ...field.Expr) IAggYmDataUtmSourceDo
	Omit(cols ...field.Expr) IAggYmDataUtmSourceDo
	Join(table schema.Tabler, on ...field.Expr) IAggYmDataUtmSourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmSourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmSourceDo
	Group(cols ...field.Expr) IAggYmDataUtmSourceDo
	Having(conds ...gen.Condition) IAggYmDataUtmSourceDo
	Limit(limit int) IAggYmDataUtmSourceDo
	Offset(offset int) IAggYmDataUtmSourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataUtmSourceDo
	Unscoped() IAggYmDataUtmSourceDo
	Create(values ...*model.AggYmDataUtmSource) error
	CreateInBatches(values []*model.AggYmDataUtmSource, batchSize int) error
	Save(values ...*model.AggYmDataUtmSource) error
	First() (*model.AggYmDataUtmSource, error)
	Take() (*model.AggYmDataUtmSource, error)
	Last() (*model.AggYmDataUtmSource, error)
	Find() ([]*model.AggYmDataUtmSource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataUtmSource, err error)
	FindInBatches(result *[]*model.AggYmDataUtmSource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AggYmDataUtmSource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAggYmDataUtmSourceDo
	Assign(attrs ...field.AssignExpr) IAggYmDataUtmSourceDo
	Joins(fields ...field.RelationField) IAggYmDataUtmSourceDo
	Preload(fields ...field.RelationField) IAggYmDataUtmSourceDo
	FirstOrInit() (*model.AggYmDataUtmSource, error)
	FirstOrCreate() (*model.AggYmDataUtmSource, error)
	FindByPage(offset int, limit int) (result []*model.AggYmDataUtmSource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAggYmDataUtmSourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aggYmDataUtmSourceDo) Debug() IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Debug())
}

func (a aggYmDataUtmSourceDo) WithContext(ctx context.Context) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aggYmDataUtmSourceDo) ReadDB() IAggYmDataUtmSourceDo {
	return a.Clauses(dbresolver.Read)
}

func (a aggYmDataUtmSourceDo) WriteDB() IAggYmDataUtmSourceDo {
	return a.Clauses(dbresolver.Write)
}

func (a aggYmDataUtmSourceDo) Session(config *gorm.Session) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Session(config))
}

func (a aggYmDataUtmSourceDo) Clauses(conds ...clause.Expression) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aggYmDataUtmSourceDo) Returning(value interface{}, columns ...string) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aggYmDataUtmSourceDo) Not(conds ...gen.Condition) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aggYmDataUtmSourceDo) Or(conds ...gen.Condition) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aggYmDataUtmSourceDo) Select(conds ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aggYmDataUtmSourceDo) Where(conds ...gen.Condition) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aggYmDataUtmSourceDo) Order(conds ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aggYmDataUtmSourceDo) Distinct(cols ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aggYmDataUtmSourceDo) Omit(cols ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aggYmDataUtmSourceDo) Join(table schema.Tabler, on ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aggYmDataUtmSourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aggYmDataUtmSourceDo) RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aggYmDataUtmSourceDo) Group(cols ...field.Expr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aggYmDataUtmSourceDo) Having(conds ...gen.Condition) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aggYmDataUtmSourceDo) Limit(limit int) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aggYmDataUtmSourceDo) Offset(offset int) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aggYmDataUtmSourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aggYmDataUtmSourceDo) Unscoped() IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aggYmDataUtmSourceDo) Create(values ...*model.AggYmDataUtmSource) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aggYmDataUtmSourceDo) CreateInBatches(values []*model.AggYmDataUtmSource, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aggYmDataUtmSourceDo) Save(values ...*model.AggYmDataUtmSource) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aggYmDataUtmSourceDo) First() (*model.AggYmDataUtmSource, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmSource), nil
	}
}

func (a aggYmDataUtmSourceDo) Take() (*model.AggYmDataUtmSource, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmSource), nil
	}
}

func (a aggYmDataUtmSourceDo) Last() (*model.AggYmDataUtmSource, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmSource), nil
	}
}

func (a aggYmDataUtmSourceDo) Find() ([]*model.AggYmDataUtmSource, error) {
	result, err := a.DO.Find()
	return result.([]*model.AggYmDataUtmSource), err
}

func (a aggYmDataUtmSourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataUtmSource, err error) {
	buf := make([]*model.AggYmDataUtmSource, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aggYmDataUtmSourceDo) FindInBatches(result *[]*model.AggYmDataUtmSource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aggYmDataUtmSourceDo) Attrs(attrs ...field.AssignExpr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aggYmDataUtmSourceDo) Assign(attrs ...field.AssignExpr) IAggYmDataUtmSourceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aggYmDataUtmSourceDo) Joins(fields ...field.RelationField) IAggYmDataUtmSourceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aggYmDataUtmSourceDo) Preload(fields ...field.RelationField) IAggYmDataUtmSourceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aggYmDataUtmSourceDo) FirstOrInit() (*model.AggYmDataUtmSource, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmSource), nil
	}
}

func (a aggYmDataUtmSourceDo) FirstOrCreate() (*model.AggYmDataUtmSource, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmSource), nil
	}
}

func (a aggYmDataUtmSourceDo) FindByPage(offset int, limit int) (result []*model.AggYmDataUtmSource, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aggYmDataUtmSourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aggYmDataUtmSourceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aggYmDataUtmSourceDo) Delete(models ...*model.AggYmDataUtmSource) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aggYmDataUtmSourceDo) withDO(do gen.Dao) *aggYmDataUtmSourceDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newAggYmDataBrowser(db *gorm.DB, opts ...gen.DOOption) aggYmDataBrowser {
	_aggYmDataBrowser := aggYmDataBrowser{}

	_aggYmDataBrowser.aggYmDataBrowserDo.UseDB(db, opts...)
	_aggYmDataBrowser.aggYmDataBrowserDo.UseModel(&model.AggYmDataBrowser{})

	tableName := _aggYmDataBrowser.aggYmDataBrowserDo.TableName()
	_aggYmDataBrowser.ALL = field.NewAsterisk(tableName)
	_aggYmDataBrowser.Timestamp = field.NewTime(tableName, "timestamp")
	_aggYmDataBrowser.Browser = field.NewString(tableName, "browser")
	_aggYmDataBrowser.Pageviews = field.NewInt32(tableName, "pageviews")
	_aggYmDataBrowser.Users = field.NewInt32(tableName, "users")

	_aggYmDataBrowser.fillFieldMap()

	return _aggYmDataBrowser
}

type aggYmDataBrowser struct {
	aggYmDataBrowserDo

	ALL       field.Asterisk
	Timestamp field.Time
	Browser   field.String
	Pageviews field.Int32
	Users     field.Int32

	fieldMap map[string]field.Expr
}

func (a aggYmDataBrowser) Table(newTableName string) *aggYmDataBrowser {
	a.aggYmDataBrowserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aggYmDataBrowser) As(alias string) *aggYmDataBrowser {
	a.aggYmDataBrowserDo.DO = *(a.aggYmDataBrowserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aggYmDataBrowser) updateTableName(table string) *aggYmDataBrowser {
	a.ALL = field.NewAsterisk(table)
	a.Timestamp = field.NewTime(table, "timestamp")
	a.Browser = field.NewString(table, "browser")
	a.Pageviews = field.NewInt32(table, "pageviews")
	a.Users = field.NewInt32(table, "users")

	a.fillFieldMap()

	return a
}

func (a *aggYmDataBrowser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aggYmDataBrowser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["browser"] = a.Browser
	a.fieldMap["pageviews"] = a.Pageviews
	a.fieldMap["users"] = a.Users
}

func (a aggYmDataBrowser) clone(db *gorm.DB) aggYmDataBrowser {
	a.aggYmDataBrowserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aggYmDataBrowser) replaceDB(db *gorm.DB) aggYmDataBrowser {
	a.aggYmDataBrowserDo.ReplaceDB(db)
	return a
}

type aggYmDataBrowserDo struct{ gen.DO }

type IAggYmDataBrowserDo interface {
	gen.SubQuery
	Debug() IAggYmDataBrowserDo
	WithContext(ctx context.Context) IAggYmDataBrowserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAggYmDataBrowserDo
	WriteDB() IAggYmDataBrowserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAggYmDataBrowserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAggYmDataBrowserDo
	Not(conds ...gen.Condition) IAggYmDataBrowserDo
	Or(conds ...gen.Condition) IAggYmDataBrowserDo
	Select(conds ...field.Expr) IAggYmDataBrowserDo
	Where(conds ...gen.Condition) IAggYmDataBrowserDo
	Order(conds ...field.Expr) IAggYmDataBrowserDo
	Distinct(cols ...field.Expr) IAggYmDataBrowserDo
	Omit(cols ...field.Expr) IAggYmDataBrowserDo
	Join(table schema.Tabler, on ...field.Expr) IAggYmDataBrowserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataBrowserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataBrowserDo
	Group(cols ...field.Expr) IAggYmDataBrowserDo
	Having(conds ...gen.Condition) IAggYmDataBrowserDo
	Limit(limit int) IAggYmDataBrowserDo
	Offset(offset int) IAggYmDataBrowserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataBrowserDo
	Unscoped() IAggYmDataBrowserDo
	Create(values ...*model.AggYmDataBrowser) error
	CreateInBatches(values []*model.AggYmDataBrowser, batchSize int) error
	Save(values ...*model.AggYmDataBrowser) error
	First() (*model.AggYmDataBrowser, error)
	Take() (*model.AggYmDataBrowser, error)
	Last() (*model.AggYmDataBrowser, error)
	Find() ([]*model.AggYmDataBrowser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataBrowser, err error)
	FindInBatches(result *[]*model.AggYmDataBrowser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AggYmDataBrowser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAggYmDataBrowserDo
	Assign(attrs ...field.AssignExpr) IAggYmDataBrowserDo
	Joins(fields ...field.RelationField) IAggYmDataBrowserDo
	Preload(fields ...field.RelationField) IAggYmDataBrowserDo
	FirstOrInit() (*model.AggYmDataBrowser, error)
	FirstOrCreate() (*model.AggYmDataBrowser, error)
	FindByPage(offset int, limit int) (result []*model.AggYmDataBrowser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAggYmDataBrowserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aggYmDataBrowserDo) Debug() IAggYmDataBrowserDo {
	return a.withDO(a.DO.Debug())
}

func (a aggYmDataBrowserDo) WithContext(ctx context.Context) IAggYmDataBrowserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aggYmDataBrowserDo) ReadDB() IAggYmDataBrowserDo {
	return a.Clauses(dbresolver.Read)
}

func (a aggYmDataBrowserDo) WriteDB() IAggYmDataBrowserDo {
	return a.Clauses(dbresolver.Write)
}

func (a aggYmDataBrowserDo) Session(config *gorm.Session) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Session(config))
}

func (a aggYmDataBrowserDo) Clauses(conds ...clause.Expression) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aggYmDataBrowserDo) Returning(value interface{}, columns ...string) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aggYmDataBrowserDo) Not(conds ...gen.Condition) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aggYmDataBrowserDo) Or(conds ...gen.Condition) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aggYmDataBrowserDo) Select(conds ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aggYmDataBrowserDo) Where(conds ...gen.Condition) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aggYmDataBrowserDo) Order(conds ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aggYmDataBrowserDo) Distinct(cols ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aggYmDataBrowserDo) Omit(cols ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aggYmDataBrowserDo) Join(table schema.Tabler, on ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aggYmDataBrowserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aggYmDataBrowserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aggYmDataBrowserDo) Group(cols ...field.Expr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aggYmDataBrowserDo) Having(conds ...gen.Condition) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aggYmDataBrowserDo) Limit(limit int) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aggYmDataBrowserDo) Offset(offset int) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aggYmDataBrowserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aggYmDataBrowserDo) Unscoped() IAggYmDataBrowserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aggYmDataBrowserDo) Create(values ...*model.AggYmDataBrowser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aggYmDataBrowserDo) CreateInBatches(values []*model.AggYmDataBrowser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aggYmDataBrowserDo) Save(values ...*model.AggYmDataBrowser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aggYmDataBrowserDo) First() (*model.AggYmDataBrowser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataBrowser), nil
	}
}

func (a aggYmDataBrowserDo) Take() (*model.AggYmDataBrowser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataBrowser), nil
	}
}

func (a aggYmDataBrowserDo) Last() (*model.AggYmDataBrowser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataBrowser), nil
	}
}

func (a aggYmDataBrowserDo) Find() ([]*model.AggYmDataBrowser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AggYmDataBrowser), err
}

func (a aggYmDataBrowserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataBrowser, err error) {
	buf := make([]*model.AggYmDataBrowser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aggYmDataBrowserDo) FindInBatches(result *[]*model.AggYmDataBrowser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aggYmDataBrowserDo) Attrs(attrs ...field.AssignExpr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aggYmDataBrowserDo) Assign(attrs ...field.AssignExpr) IAggYmDataBrowserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aggYmDataBrowserDo) Joins(fields ...field.RelationField) IAggYmDataBrowserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aggYmDataBrowserDo) Preload(fields ...field.RelationField) IAggYmDataBrowserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aggYmDataBrowserDo) FirstOrInit() (*model.AggYmDataBrowser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataBrowser), nil
	}
}

func (a aggYmDataBrowserDo) FirstOrCreate() (*model.AggYmDataBrowser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataBrowser), nil
	}
}

func (a aggYmDataBrowserDo) FindByPage(offset int, limit int) (result []*model.AggYmDataBrowser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aggYmDataBrowserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aggYmDataBrowserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aggYmDataBrowserDo) Delete(models ...*model.AggYmDataBrowser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aggYmDataBrowserDo) withDO(do gen.Dao) *aggYmDataBrowserDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newSmartlink(db *gorm.DB, opts ...gen.DOOption) smartlink {
	_smartlink := smartlink{}

	_smartlink.smartlinkDo.UseDB(db, opts...)
	_smartlink.smartlinkDo.UseModel(&model.Smartlink{})

	tableName := _smartlink.smartlinkDo.TableName()
	_smartlink.ALL = field.NewAsterisk(tableName)
	_smartlink.BrowserFamily = field.NewString(tableName, "browser_family")
	_smartlink.Date1 = field.NewTime(tableName, "date1")
	_smartlink.UtmSource = field.NewString(tableName, "utm_source")
	_smartlink.EventCategory = field.NewString(tableName, "event_category")
	_smartlink.EventAction = field.NewString(tableName, "event_action")
	_smartlink.EventLabel = field.NewString(tableName, "event_label")
	_smartlink.UtmMedium = field.NewString(tableName, "utm_medium")
	_smartlink.UtmCampaign = field.NewString(tableName, "utm_campaign")
	_smartlink.UserAgent = field.NewString(tableName, "user_agent")
	_smartlink.PageURL = field.NewString(tableName, "page_url")
	_smartlink.SlName = field.NewString(tableName, "sl_name")
	_smartlink.URLNoParams = field.NewString(tableName, "url_no_params")
	_smartlink.CreatedMillis = field.NewInt64(tableName, "created_millis")
	_smartlink.Gid = field.NewString(tableName, "gid")
	_smartlink.UniqGlobalID = field.NewString(tableName, "uniq_global_id")
	_smartlink.FirstPartyCookie = field.NewString(tableName, "first_party_cookie")
	_smartlink.YandexUID = field.NewString(tableName, "yandex_uid")
	_smartlink.DeviceManufacturer = field.NewString(tableName, "device_manufacturer")
	_smartlink.DeviceModel = field.NewString(tableName, "device_model")
	_smartlink.OsFamily = field.NewString(tableName, "os_family")

	_smartlink.fillFieldMap()

	return _smartlink
}

type smartlink struct {
	smartlinkDo

	ALL                field.Asterisk
	BrowserFamily      field.String
	Date1              field.Time
	UtmSource          field.String
	EventCategory      field.String
	EventAction        field.String
	EventLabel         field.String
	UtmMedium          field.String
	UtmCampaign        field.String
	UserAgent          field.String
	PageURL            field.String
	SlName             field.String
	URLNoParams        field.String
	CreatedMillis      field.Int64
	Gid                field.String
	UniqGlobalID       field.String
	FirstPartyCookie   field.String
	YandexUID          field.String
	DeviceManufacturer field.String
	DeviceModel        field.String
	OsFamily           field.String

	fieldMap map[string]field.Expr
}

func (s smartlink) Table(newTableName string) *smartlink {
	s.smartlinkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smartlink) As(alias string) *smartlink {
	s.smartlinkDo.DO = *(s.smartlinkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smartlink) updateTableName(table string) *smartlink {
	s.ALL = field.NewAsterisk(table)
	s.BrowserFamily = field.NewString(table, "browser_family")
	s.Date1 = field.NewTime(table, "date1")
	s.UtmSource = field.NewString(table, "utm_source")
	s.EventCategory = field.NewString(table, "event_category")
	s.EventAction = field.NewString(table, "event_action")
	s.EventLabel = field.NewString(table, "event_label")
	s.UtmMedium = field.NewString(table, "utm_medium")
	s.UtmCampaign = field.NewString(table, "utm_campaign")
	s.UserAgent = field.NewString(table, "user_agent")
	s.PageURL = field.NewString(table, "page_url")
	s.SlName = field.NewString(table, "sl_name")
	s.URLNoParams = field.NewString(table, "url_no_params")
	s.CreatedMillis = field.NewInt64(table, "created_millis")
	s.Gid = field.NewString(table, "gid")
	s.UniqGlobalID = field.NewString(table, "uniq_global_id")
	s.FirstPartyCookie = field.NewString(table, "first_party_cookie")
	s.YandexUID = field.NewString(table, "yandex_uid")
	s.DeviceManufacturer = field.NewString(table, "device_manufacturer")
	s.DeviceModel = field.NewString(table, "device_model")
	s.OsFamily = field.NewString(table, "os_family")

	s.fillFieldMap()

	return s
}

func (s *smartlink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smartlink) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["browser_family"] = s.BrowserFamily
	s.fieldMap["date1"] = s.Date1
	s.fieldMap["utm_source"] = s.UtmSource
	s.fieldMap["event_category"] = s.EventCategory
	s.fieldMap["event_action"] = s.EventAction
	s.fieldMap["event_label"] = s.EventLabel
	s.fieldMap["utm_medium"] = s.UtmMedium
	s.fieldMap["utm_campaign"] = s.UtmCampaign
	s.fieldMap["user_agent"] = s.UserAgent
	s.fieldMap["page_url"] = s.PageURL
	s.fieldMap["sl_name"] = s.SlName
	s.fieldMap["url_no_params"] = s.URLNoParams
	s.fieldMap["created_millis"] = s.CreatedMillis
	s.fieldMap["gid"] = s.Gid
	s.fieldMap["uniq_global_id"] = s.UniqGlobalID
	s.fieldMap["first_party_cookie"] = s.FirstPartyCookie
	s.fieldMap["yandex_uid"] = s.YandexUID
	s.fieldMap["device_manufacturer"] = s.DeviceManufacturer
	s.fieldMap["device_model"] = s.DeviceModel
	s.fieldMap["os_family"] = s.OsFamily
}

func (s smartlink) clone(db *gorm.DB) smartlink {
	s.smartlinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smartlink) replaceDB(db *gorm.DB) smartlink {
	s.smartlinkDo.ReplaceDB(db)
	return s
}

type smartlinkDo struct{ gen.DO }

type ISmartlinkDo interface {
	gen.SubQuery
	Debug() ISmartlinkDo
	WithContext(ctx context.Context) ISmartlinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmartlinkDo
	WriteDB() ISmartlinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmartlinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmartlinkDo
	Not(conds ...gen.Condition) ISmartlinkDo
	Or(conds ...gen.Condition) ISmartlinkDo
	Select(conds ...field.Expr) ISmartlinkDo
	Where(conds ...gen.Condition) ISmartlinkDo
	Order(conds ...field.Expr) ISmartlinkDo
	Distinct(cols ...field.Expr) ISmartlinkDo
	Omit(cols ...field.Expr) ISmartlinkDo
	Join(table schema.Tabler, on ...field.Expr) ISmartlinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmartlinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmartlinkDo
	Group(cols ...field.Expr) ISmartlinkDo
	Having(conds ...gen.Condition) ISmartlinkDo
	Limit(limit int) ISmartlinkDo
	Offset(offset int) ISmartlinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmartlinkDo
	Unscoped() ISmartlinkDo
	Create(values ...*model.Smartlink) error
	CreateInBatches(values []*model.Smartlink, batchSize int) error
	Save(values ...*model.Smartlink) error
	First() (*model.Smartlink, error)
	Take() (*model.Smartlink, error)
	Last() (*model.Smartlink, error)
	Find() ([]*model.Smartlink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Smartlink, err error)
	FindInBatches(result *[]*model.Smartlink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Smartlink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmartlinkDo
	Assign(attrs ...field.AssignExpr) ISmartlinkDo
	Joins(fields ...field.RelationField) ISmartlinkDo
	Preload(fields ...field.RelationField) ISmartlinkDo
	FirstOrInit() (*model.Smartlink, error)
	FirstOrCreate() (*model.Smartlink, error)
	FindByPage(offset int, limit int) (result []*model.Smartlink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmartlinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smartlinkDo) Debug() ISmartlinkDo {
	return s.withDO(s.DO.Debug())
}

func (s smartlinkDo) WithContext(ctx context.Context) ISmartlinkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smartlinkDo) ReadDB() ISmartlinkDo {
	return s.Clauses(dbresolver.Read)
}

func (s smartlinkDo) WriteDB() ISmartlinkDo {
	return s.Clauses(dbresolver.Write)
}

func (s smartlinkDo) Session(config *gorm.Session) ISmartlinkDo {
	return s.withDO(s.DO.Session(config))
}

func (s smartlinkDo) Clauses(conds ...clause.Expression) ISmartlinkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smartlinkDo) Returning(value interface{}, columns ...string) ISmartlinkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smartlinkDo) Not(conds ...gen.Condition) ISmartlinkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smartlinkDo) Or(conds ...gen.Condition) ISmartlinkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smartlinkDo) Select(conds ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smartlinkDo) Where(conds ...gen.Condition) ISmartlinkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smartlinkDo) Order(conds ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smartlinkDo) Distinct(cols ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smartlinkDo) Omit(cols ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smartlinkDo) Join(table schema.Tabler, on ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smartlinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smartlinkDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smartlinkDo) Group(cols ...field.Expr) ISmartlinkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smartlinkDo) Having(conds ...gen.Condition) ISmartlinkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smartlinkDo) Limit(limit int) ISmartlinkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smartlinkDo) Offset(offset int) ISmartlinkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smartlinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmartlinkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smartlinkDo) Unscoped() ISmartlinkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smartlinkDo) Create(values ...*model.Smartlink) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smartlinkDo) CreateInBatches(values []*model.Smartlink, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smartlinkDo) Save(values ...*model.Smartlink) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smartlinkDo) First() (*model.Smartlink, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smartlink), nil
	}
}

func (s smartlinkDo) Take() (*model.Smartlink, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smartlink), nil
	}
}

func (s smartlinkDo) Last() (*model.Smartlink, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smartlink), nil
	}
}

func (s smartlinkDo) Find() ([]*model.Smartlink, error) {
	result, err := s.DO.Find()
	return result.([]*model.Smartlink), err
}

func (s smartlinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Smartlink, err error) {
	buf := make([]*model.Smartlink, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smartlinkDo) FindInBatches(result *[]*model.Smartlink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smartlinkDo) Attrs(attrs ...field.AssignExpr) ISmartlinkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smartlinkDo) Assign(attrs ...field.AssignExpr) ISmartlinkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smartlinkDo) Joins(fields ...field.RelationField) ISmartlinkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smartlinkDo) Preload(fields ...field.RelationField) ISmartlinkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smartlinkDo) FirstOrInit() (*model.Smartlink, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smartlink), nil
	}
}

func (s smartlinkDo) FirstOrCreate() (*model.Smartlink, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Smartlink), nil
	}
}

func (s smartlinkDo) FindByPage(offset int, limit int) (result []*model.Smartlink, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smartlinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smartlinkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smartlinkDo) Delete(models ...*model.Smartlink) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smartlinkDo) withDO(do gen.Dao) *smartlinkDo {
	s.DO = *do.(*gen.DO)
	return s
}

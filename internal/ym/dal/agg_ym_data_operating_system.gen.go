// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newAggYmDataOperatingSystem(db *gorm.DB, opts ...gen.DOOption) aggYmDataOperatingSystem {
	_aggYmDataOperatingSystem := aggYmDataOperatingSystem{}

	_aggYmDataOperatingSystem.aggYmDataOperatingSystemDo.UseDB(db, opts...)
	_aggYmDataOperatingSystem.aggYmDataOperatingSystemDo.UseModel(&model.AggYmDataOperatingSystem{})

	tableName := _aggYmDataOperatingSystem.aggYmDataOperatingSystemDo.TableName()
	_aggYmDataOperatingSystem.ALL = field.NewAsterisk(tableName)
	_aggYmDataOperatingSystem.Timestamp = field.NewTime(tableName, "timestamp")
	_aggYmDataOperatingSystem.OperatingSystem = field.NewString(tableName, "operating_system")
	_aggYmDataOperatingSystem.Pageviews = field.NewInt32(tableName, "pageviews")
	_aggYmDataOperatingSystem.Users = field.NewInt32(tableName, "users")

	_aggYmDataOperatingSystem.fillFieldMap()

	return _aggYmDataOperatingSystem
}

type aggYmDataOperatingSystem struct {
	aggYmDataOperatingSystemDo

	ALL             field.Asterisk
	Timestamp       field.Time
	OperatingSystem field.String
	Pageviews       field.Int32
	Users           field.Int32

	fieldMap map[string]field.Expr
}

func (a aggYmDataOperatingSystem) Table(newTableName string) *aggYmDataOperatingSystem {
	a.aggYmDataOperatingSystemDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aggYmDataOperatingSystem) As(alias string) *aggYmDataOperatingSystem {
	a.aggYmDataOperatingSystemDo.DO = *(a.aggYmDataOperatingSystemDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aggYmDataOperatingSystem) updateTableName(table string) *aggYmDataOperatingSystem {
	a.ALL = field.NewAsterisk(table)
	a.Timestamp = field.NewTime(table, "timestamp")
	a.OperatingSystem = field.NewString(table, "operating_system")
	a.Pageviews = field.NewInt32(table, "pageviews")
	a.Users = field.NewInt32(table, "users")

	a.fillFieldMap()

	return a
}

func (a *aggYmDataOperatingSystem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aggYmDataOperatingSystem) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["operating_system"] = a.OperatingSystem
	a.fieldMap["pageviews"] = a.Pageviews
	a.fieldMap["users"] = a.Users
}

func (a aggYmDataOperatingSystem) clone(db *gorm.DB) aggYmDataOperatingSystem {
	a.aggYmDataOperatingSystemDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aggYmDataOperatingSystem) replaceDB(db *gorm.DB) aggYmDataOperatingSystem {
	a.aggYmDataOperatingSystemDo.ReplaceDB(db)
	return a
}

type aggYmDataOperatingSystemDo struct{ gen.DO }

type IAggYmDataOperatingSystemDo interface {
	gen.SubQuery
	Debug() IAggYmDataOperatingSystemDo
	WithContext(ctx context.Context) IAggYmDataOperatingSystemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAggYmDataOperatingSystemDo
	WriteDB() IAggYmDataOperatingSystemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAggYmDataOperatingSystemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAggYmDataOperatingSystemDo
	Not(conds ...gen.Condition) IAggYmDataOperatingSystemDo
	Or(conds ...gen.Condition) IAggYmDataOperatingSystemDo
	Select(conds ...field.Expr) IAggYmDataOperatingSystemDo
	Where(conds ...gen.Condition) IAggYmDataOperatingSystemDo
	Order(conds ...field.Expr) IAggYmDataOperatingSystemDo
	Distinct(cols ...field.Expr) IAggYmDataOperatingSystemDo
	Omit(cols ...field.Expr) IAggYmDataOperatingSystemDo
	Join(table schema.Tabler, on ...field.Expr) IAggYmDataOperatingSystemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataOperatingSystemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataOperatingSystemDo
	Group(cols ...field.Expr) IAggYmDataOperatingSystemDo
	Having(conds ...gen.Condition) IAggYmDataOperatingSystemDo
	Limit(limit int) IAggYmDataOperatingSystemDo
	Offset(offset int) IAggYmDataOperatingSystemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataOperatingSystemDo
	Unscoped() IAggYmDataOperatingSystemDo
	Create(values ...*model.AggYmDataOperatingSystem) error
	CreateInBatches(values []*model.AggYmDataOperatingSystem, batchSize int) error
	Save(values ...*model.AggYmDataOperatingSystem) error
	First() (*model.AggYmDataOperatingSystem, error)
	Take() (*model.AggYmDataOperatingSystem, error)
	Last() (*model.AggYmDataOperatingSystem, error)
	Find() ([]*model.AggYmDataOperatingSystem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataOperatingSystem, err error)
	FindInBatches(result *[]*model.AggYmDataOperatingSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AggYmDataOperatingSystem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAggYmDataOperatingSystemDo
	Assign(attrs ...field.AssignExpr) IAggYmDataOperatingSystemDo
	Joins(fields ...field.RelationField) IAggYmDataOperatingSystemDo
	Preload(fields ...field.RelationField) IAggYmDataOperatingSystemDo
	FirstOrInit() (*model.AggYmDataOperatingSystem, error)
	FirstOrCreate() (*model.AggYmDataOperatingSystem, error)
	FindByPage(offset int, limit int) (result []*model.AggYmDataOperatingSystem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAggYmDataOperatingSystemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aggYmDataOperatingSystemDo) Debug() IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Debug())
}

func (a aggYmDataOperatingSystemDo) WithContext(ctx context.Context) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aggYmDataOperatingSystemDo) ReadDB() IAggYmDataOperatingSystemDo {
	return a.Clauses(dbresolver.Read)
}

func (a aggYmDataOperatingSystemDo) WriteDB() IAggYmDataOperatingSystemDo {
	return a.Clauses(dbresolver.Write)
}

func (a aggYmDataOperatingSystemDo) Session(config *gorm.Session) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Session(config))
}

func (a aggYmDataOperatingSystemDo) Clauses(conds ...clause.Expression) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aggYmDataOperatingSystemDo) Returning(value interface{}, columns ...string) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aggYmDataOperatingSystemDo) Not(conds ...gen.Condition) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aggYmDataOperatingSystemDo) Or(conds ...gen.Condition) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aggYmDataOperatingSystemDo) Select(conds ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aggYmDataOperatingSystemDo) Where(conds ...gen.Condition) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aggYmDataOperatingSystemDo) Order(conds ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aggYmDataOperatingSystemDo) Distinct(cols ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aggYmDataOperatingSystemDo) Omit(cols ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aggYmDataOperatingSystemDo) Join(table schema.Tabler, on ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aggYmDataOperatingSystemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aggYmDataOperatingSystemDo) RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aggYmDataOperatingSystemDo) Group(cols ...field.Expr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aggYmDataOperatingSystemDo) Having(conds ...gen.Condition) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aggYmDataOperatingSystemDo) Limit(limit int) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aggYmDataOperatingSystemDo) Offset(offset int) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aggYmDataOperatingSystemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aggYmDataOperatingSystemDo) Unscoped() IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aggYmDataOperatingSystemDo) Create(values ...*model.AggYmDataOperatingSystem) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aggYmDataOperatingSystemDo) CreateInBatches(values []*model.AggYmDataOperatingSystem, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aggYmDataOperatingSystemDo) Save(values ...*model.AggYmDataOperatingSystem) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aggYmDataOperatingSystemDo) First() (*model.AggYmDataOperatingSystem, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataOperatingSystem), nil
	}
}

func (a aggYmDataOperatingSystemDo) Take() (*model.AggYmDataOperatingSystem, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataOperatingSystem), nil
	}
}

func (a aggYmDataOperatingSystemDo) Last() (*model.AggYmDataOperatingSystem, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataOperatingSystem), nil
	}
}

func (a aggYmDataOperatingSystemDo) Find() ([]*model.AggYmDataOperatingSystem, error) {
	result, err := a.DO.Find()
	return result.([]*model.AggYmDataOperatingSystem), err
}

func (a aggYmDataOperatingSystemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataOperatingSystem, err error) {
	buf := make([]*model.AggYmDataOperatingSystem, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aggYmDataOperatingSystemDo) FindInBatches(result *[]*model.AggYmDataOperatingSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aggYmDataOperatingSystemDo) Attrs(attrs ...field.AssignExpr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aggYmDataOperatingSystemDo) Assign(attrs ...field.AssignExpr) IAggYmDataOperatingSystemDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aggYmDataOperatingSystemDo) Joins(fields ...field.RelationField) IAggYmDataOperatingSystemDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aggYmDataOperatingSystemDo) Preload(fields ...field.RelationField) IAggYmDataOperatingSystemDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aggYmDataOperatingSystemDo) FirstOrInit() (*model.AggYmDataOperatingSystem, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataOperatingSystem), nil
	}
}

func (a aggYmDataOperatingSystemDo) FirstOrCreate() (*model.AggYmDataOperatingSystem, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataOperatingSystem), nil
	}
}

func (a aggYmDataOperatingSystemDo) FindByPage(offset int, limit int) (result []*model.AggYmDataOperatingSystem, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aggYmDataOperatingSystemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aggYmDataOperatingSystemDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aggYmDataOperatingSystemDo) Delete(models ...*model.AggYmDataOperatingSystem) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aggYmDataOperatingSystemDo) withDO(do gen.Dao) *aggYmDataOperatingSystemDo {
	a.DO = *do.(*gen.DO)
	return a
}

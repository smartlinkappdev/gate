// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cmd/gate/main.go/internal/ym/model"
)

func newAggYmDataUtmCampaign(db *gorm.DB, opts ...gen.DOOption) aggYmDataUtmCampaign {
	_aggYmDataUtmCampaign := aggYmDataUtmCampaign{}

	_aggYmDataUtmCampaign.aggYmDataUtmCampaignDo.UseDB(db, opts...)
	_aggYmDataUtmCampaign.aggYmDataUtmCampaignDo.UseModel(&model.AggYmDataUtmCampaign{})

	tableName := _aggYmDataUtmCampaign.aggYmDataUtmCampaignDo.TableName()
	_aggYmDataUtmCampaign.ALL = field.NewAsterisk(tableName)
	_aggYmDataUtmCampaign.Timestamp = field.NewTime(tableName, "timestamp")
	_aggYmDataUtmCampaign.UtmCampaign = field.NewString(tableName, "utm_campaign")
	_aggYmDataUtmCampaign.Pageviews = field.NewInt32(tableName, "pageviews")
	_aggYmDataUtmCampaign.Users = field.NewInt32(tableName, "users")

	_aggYmDataUtmCampaign.fillFieldMap()

	return _aggYmDataUtmCampaign
}

type aggYmDataUtmCampaign struct {
	aggYmDataUtmCampaignDo

	ALL         field.Asterisk
	Timestamp   field.Time
	UtmCampaign field.String
	Pageviews   field.Int32
	Users       field.Int32

	fieldMap map[string]field.Expr
}

func (a aggYmDataUtmCampaign) Table(newTableName string) *aggYmDataUtmCampaign {
	a.aggYmDataUtmCampaignDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aggYmDataUtmCampaign) As(alias string) *aggYmDataUtmCampaign {
	a.aggYmDataUtmCampaignDo.DO = *(a.aggYmDataUtmCampaignDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aggYmDataUtmCampaign) updateTableName(table string) *aggYmDataUtmCampaign {
	a.ALL = field.NewAsterisk(table)
	a.Timestamp = field.NewTime(table, "timestamp")
	a.UtmCampaign = field.NewString(table, "utm_campaign")
	a.Pageviews = field.NewInt32(table, "pageviews")
	a.Users = field.NewInt32(table, "users")

	a.fillFieldMap()

	return a
}

func (a *aggYmDataUtmCampaign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aggYmDataUtmCampaign) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["utm_campaign"] = a.UtmCampaign
	a.fieldMap["pageviews"] = a.Pageviews
	a.fieldMap["users"] = a.Users
}

func (a aggYmDataUtmCampaign) clone(db *gorm.DB) aggYmDataUtmCampaign {
	a.aggYmDataUtmCampaignDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aggYmDataUtmCampaign) replaceDB(db *gorm.DB) aggYmDataUtmCampaign {
	a.aggYmDataUtmCampaignDo.ReplaceDB(db)
	return a
}

type aggYmDataUtmCampaignDo struct{ gen.DO }

type IAggYmDataUtmCampaignDo interface {
	gen.SubQuery
	Debug() IAggYmDataUtmCampaignDo
	WithContext(ctx context.Context) IAggYmDataUtmCampaignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAggYmDataUtmCampaignDo
	WriteDB() IAggYmDataUtmCampaignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAggYmDataUtmCampaignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAggYmDataUtmCampaignDo
	Not(conds ...gen.Condition) IAggYmDataUtmCampaignDo
	Or(conds ...gen.Condition) IAggYmDataUtmCampaignDo
	Select(conds ...field.Expr) IAggYmDataUtmCampaignDo
	Where(conds ...gen.Condition) IAggYmDataUtmCampaignDo
	Order(conds ...field.Expr) IAggYmDataUtmCampaignDo
	Distinct(cols ...field.Expr) IAggYmDataUtmCampaignDo
	Omit(cols ...field.Expr) IAggYmDataUtmCampaignDo
	Join(table schema.Tabler, on ...field.Expr) IAggYmDataUtmCampaignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmCampaignDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmCampaignDo
	Group(cols ...field.Expr) IAggYmDataUtmCampaignDo
	Having(conds ...gen.Condition) IAggYmDataUtmCampaignDo
	Limit(limit int) IAggYmDataUtmCampaignDo
	Offset(offset int) IAggYmDataUtmCampaignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataUtmCampaignDo
	Unscoped() IAggYmDataUtmCampaignDo
	Create(values ...*model.AggYmDataUtmCampaign) error
	CreateInBatches(values []*model.AggYmDataUtmCampaign, batchSize int) error
	Save(values ...*model.AggYmDataUtmCampaign) error
	First() (*model.AggYmDataUtmCampaign, error)
	Take() (*model.AggYmDataUtmCampaign, error)
	Last() (*model.AggYmDataUtmCampaign, error)
	Find() ([]*model.AggYmDataUtmCampaign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataUtmCampaign, err error)
	FindInBatches(result *[]*model.AggYmDataUtmCampaign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AggYmDataUtmCampaign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAggYmDataUtmCampaignDo
	Assign(attrs ...field.AssignExpr) IAggYmDataUtmCampaignDo
	Joins(fields ...field.RelationField) IAggYmDataUtmCampaignDo
	Preload(fields ...field.RelationField) IAggYmDataUtmCampaignDo
	FirstOrInit() (*model.AggYmDataUtmCampaign, error)
	FirstOrCreate() (*model.AggYmDataUtmCampaign, error)
	FindByPage(offset int, limit int) (result []*model.AggYmDataUtmCampaign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAggYmDataUtmCampaignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aggYmDataUtmCampaignDo) Debug() IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Debug())
}

func (a aggYmDataUtmCampaignDo) WithContext(ctx context.Context) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aggYmDataUtmCampaignDo) ReadDB() IAggYmDataUtmCampaignDo {
	return a.Clauses(dbresolver.Read)
}

func (a aggYmDataUtmCampaignDo) WriteDB() IAggYmDataUtmCampaignDo {
	return a.Clauses(dbresolver.Write)
}

func (a aggYmDataUtmCampaignDo) Session(config *gorm.Session) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Session(config))
}

func (a aggYmDataUtmCampaignDo) Clauses(conds ...clause.Expression) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aggYmDataUtmCampaignDo) Returning(value interface{}, columns ...string) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aggYmDataUtmCampaignDo) Not(conds ...gen.Condition) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aggYmDataUtmCampaignDo) Or(conds ...gen.Condition) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aggYmDataUtmCampaignDo) Select(conds ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aggYmDataUtmCampaignDo) Where(conds ...gen.Condition) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aggYmDataUtmCampaignDo) Order(conds ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aggYmDataUtmCampaignDo) Distinct(cols ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aggYmDataUtmCampaignDo) Omit(cols ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aggYmDataUtmCampaignDo) Join(table schema.Tabler, on ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aggYmDataUtmCampaignDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aggYmDataUtmCampaignDo) RightJoin(table schema.Tabler, on ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aggYmDataUtmCampaignDo) Group(cols ...field.Expr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aggYmDataUtmCampaignDo) Having(conds ...gen.Condition) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aggYmDataUtmCampaignDo) Limit(limit int) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aggYmDataUtmCampaignDo) Offset(offset int) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aggYmDataUtmCampaignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aggYmDataUtmCampaignDo) Unscoped() IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aggYmDataUtmCampaignDo) Create(values ...*model.AggYmDataUtmCampaign) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aggYmDataUtmCampaignDo) CreateInBatches(values []*model.AggYmDataUtmCampaign, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aggYmDataUtmCampaignDo) Save(values ...*model.AggYmDataUtmCampaign) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aggYmDataUtmCampaignDo) First() (*model.AggYmDataUtmCampaign, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmCampaign), nil
	}
}

func (a aggYmDataUtmCampaignDo) Take() (*model.AggYmDataUtmCampaign, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmCampaign), nil
	}
}

func (a aggYmDataUtmCampaignDo) Last() (*model.AggYmDataUtmCampaign, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmCampaign), nil
	}
}

func (a aggYmDataUtmCampaignDo) Find() ([]*model.AggYmDataUtmCampaign, error) {
	result, err := a.DO.Find()
	return result.([]*model.AggYmDataUtmCampaign), err
}

func (a aggYmDataUtmCampaignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AggYmDataUtmCampaign, err error) {
	buf := make([]*model.AggYmDataUtmCampaign, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aggYmDataUtmCampaignDo) FindInBatches(result *[]*model.AggYmDataUtmCampaign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aggYmDataUtmCampaignDo) Attrs(attrs ...field.AssignExpr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aggYmDataUtmCampaignDo) Assign(attrs ...field.AssignExpr) IAggYmDataUtmCampaignDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aggYmDataUtmCampaignDo) Joins(fields ...field.RelationField) IAggYmDataUtmCampaignDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aggYmDataUtmCampaignDo) Preload(fields ...field.RelationField) IAggYmDataUtmCampaignDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aggYmDataUtmCampaignDo) FirstOrInit() (*model.AggYmDataUtmCampaign, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmCampaign), nil
	}
}

func (a aggYmDataUtmCampaignDo) FirstOrCreate() (*model.AggYmDataUtmCampaign, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AggYmDataUtmCampaign), nil
	}
}

func (a aggYmDataUtmCampaignDo) FindByPage(offset int, limit int) (result []*model.AggYmDataUtmCampaign, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aggYmDataUtmCampaignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aggYmDataUtmCampaignDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aggYmDataUtmCampaignDo) Delete(models ...*model.AggYmDataUtmCampaign) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aggYmDataUtmCampaignDo) withDO(do gen.Dao) *aggYmDataUtmCampaignDo {
	a.DO = *do.(*gen.DO)
	return a
}
